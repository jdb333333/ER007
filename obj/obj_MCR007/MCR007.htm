<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\obj_MCR007\MCR007.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\obj_MCR007\MCR007.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Apr 18 15:24:06 2019
<BR><P>
<H3>Maximum Stack Usage =       4648 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[49]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1a1]">AppendEntry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a1]">AppendEntry</a><BR>
 <LI><a href="#[221]">CheckInput</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19a]">ChnInput</a><BR>
 <LI><a href="#[2d0]">ProgSysFlag</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">CheckFirmKey</a><BR>
 <LI><a href="#[211]">ListItems</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c2]">BarCode</a><BR>
 <LI><a href="#[19e]">CheckFirmKey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">CheckFirmKey</a><BR>
 <LI><a href="#[439]">ProcessKeyMacro</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[438]">ProcessFunctions</a><BR>
 <LI><a href="#[436]">ProcessFuncLook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[438]">ProcessFunctions</a><BR>
 <LI><a href="#[326]">SuspendReceipt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[438]">ProcessFunctions</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[49]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[77]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[78]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[79]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[76]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[86]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[f0]">CSV_Dept</a> from usbdiskapp.o(i.CSV_Dept) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f9]">CSV_DirectDisc</a> from usbdiskapp.o(i.CSV_DirectDisc) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[102]">CSV_EcrNum</a> from usbdiskapp.o(i.CSV_EcrNum) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f2]">CSV_End</a> from usbdiskapp.o(i.CSV_End) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ff]">CSV_InsertIC</a> from usbdiskapp.o(i.CSV_InsertIC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[fd]">CSV_Message</a> from usbdiskapp.o(i.CSV_Message) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f6]">CSV_ModeLock</a> from usbdiskapp.o(i.CSV_ModeLock) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ef]">CSV_NULL</a> from usbdiskapp.o(i.CSV_NULL) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[fb]">CSV_New</a> from usbdiskapp.o(i.CSV_New) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f3]">CSV_NonAdd</a> from usbdiskapp.o(i.CSV_NonAdd) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f4]">CSV_Operator</a> from usbdiskapp.o(i.CSV_Operator) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[104]">CSV_PbClose</a> from usbdiskapp.o(i.CSV_PbClose) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[105]">CSV_PbOpen</a> from usbdiskapp.o(i.CSV_PbOpen) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[106]">CSV_PbTransTo</a> from usbdiskapp.o(i.CSV_PbTransTo) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f7]">CSV_PercentDisc</a> from usbdiskapp.o(i.CSV_PercentDisc) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f1]">CSV_Plu</a> from usbdiskapp.o(i.CSV_Plu) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[107]">CSV_PoRa</a> from usbdiskapp.o(i.CSV_PoRa) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[fe]">CSV_RPEnd</a> from usbdiskapp.o(i.CSV_RPEnd) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[100]">CSV_RefreshIC</a> from usbdiskapp.o(i.CSV_RefreshIC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[101]">CSV_SetPrice</a> from usbdiskapp.o(i.CSV_SetPrice) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[fa]">CSV_SubTotalDirDisc</a> from usbdiskapp.o(i.CSV_SubTotalDirDisc) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f8]">CSV_SubTotalDisc</a> from usbdiskapp.o(i.CSV_SubTotalDisc) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[fc]">CSV_SubTotals</a> from usbdiskapp.o(i.CSV_SubTotals) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[108]">CSV_TAX</a> from usbdiskapp.o(i.CSV_TAX) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[f5]">CSV_Tender</a> from usbdiskapp.o(i.CSV_Tender) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[103]">CSV_Void</a> from usbdiskapp.o(i.CSV_Void) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[a8]">Cut_Paper</a> from print_main.o(i.Cut_Paper) referenced from print_main.o(.constdata)
 <LI><a href="#[85]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[66]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10a]">DispDept</a> from flowbill.o(i.DispDept) referenced from flowbill.o(.constdata)
 <LI><a href="#[113]">DispDirectDisc</a> from flowbill.o(i.DispDirectDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[11c]">DispEcrNum</a> from flowbill.o(i.DispEcrNum) referenced from flowbill.o(.constdata)
 <LI><a href="#[10c]">DispEnd</a> from flowbill.o(i.DispEnd) referenced from flowbill.o(.constdata)
 <LI><a href="#[119]">DispInsertIC</a> from flowbill.o(i.DispInsertIC) referenced from flowbill.o(.constdata)
 <LI><a href="#[117]">DispMessage</a> from flowbill.o(i.DispMessage) referenced from flowbill.o(.constdata)
 <LI><a href="#[110]">DispModeLock</a> from flowbill.o(i.DispModeLock) referenced from flowbill.o(.constdata)
 <LI><a href="#[109]">DispNULL</a> from flowbill.o(i.DispNULL) referenced 2 times from flowbill.o(.constdata)
 <LI><a href="#[115]">DispNew</a> from flowbill.o(i.DispNew) referenced from flowbill.o(.constdata)
 <LI><a href="#[10d]">DispNonAdd</a> from flowbill.o(i.DispNonAdd) referenced from flowbill.o(.constdata)
 <LI><a href="#[10e]">DispOperator</a> from flowbill.o(i.DispOperator) referenced from flowbill.o(.constdata)
 <LI><a href="#[11e]">DispPbClose</a> from flowbill.o(i.DispPbClose) referenced from flowbill.o(.constdata)
 <LI><a href="#[11f]">DispPbOpen</a> from flowbill.o(i.DispPbOpen) referenced from flowbill.o(.constdata)
 <LI><a href="#[120]">DispPbTransTo</a> from flowbill.o(i.DispPbTransTo) referenced from flowbill.o(.constdata)
 <LI><a href="#[111]">DispPercentDisc</a> from flowbill.o(i.DispPercentDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[10b]">DispPlu</a> from flowbill.o(i.DispPlu) referenced from flowbill.o(.constdata)
 <LI><a href="#[121]">DispPoRa</a> from flowbill.o(i.DispPoRa) referenced from flowbill.o(.constdata)
 <LI><a href="#[123]">DispRECEIPT</a> from flowbill.o(i.DispRECEIPT) referenced from flowbill.o(.constdata)
 <LI><a href="#[118]">DispRPEnd</a> from flowbill.o(i.DispRPEnd) referenced from flowbill.o(.constdata)
 <LI><a href="#[11a]">DispRefreshIC</a> from flowbill.o(i.DispRefreshIC) referenced from flowbill.o(.constdata)
 <LI><a href="#[11b]">DispSetPrice</a> from flowbill.o(i.DispSetPrice) referenced from flowbill.o(.constdata)
 <LI><a href="#[114]">DispSubTotalDirDisc</a> from flowbill.o(i.DispSubTotalDirDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[112]">DispSubTotalDisc</a> from flowbill.o(i.DispSubTotalDisc) referenced from flowbill.o(.constdata)
 <LI><a href="#[116]">DispSubTotals</a> from flowbill.o(i.DispSubTotals) referenced from flowbill.o(.constdata)
 <LI><a href="#[122]">DispTAX</a> from flowbill.o(i.DispTAX) referenced from flowbill.o(.constdata)
 <LI><a href="#[10f]">DispTender</a> from flowbill.o(i.DispTender) referenced from flowbill.o(.constdata)
 <LI><a href="#[11d]">DispVoid</a> from flowbill.o(i.DispVoid) referenced from flowbill.o(.constdata)
 <LI><a href="#[8f]">DisplayChar</a> from chndisp.o(i.DisplayChar) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[8d]">DisplayNull</a> from firmkey.o(i.DisplayNull) referenced from firmkey.o(i.CheckMode)
 <LI><a href="#[8c]">DisplayRecNo</a> from firmkey.o(i.DisplayRecNo) referenced from firmkey.o(i.CheckFirmKey)
 <LI><a href="#[8b]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced 2 times from firmkey.o(i.CheckFirmKey)
 <LI><a href="#[8b]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from firmkey.o(i.DisplaySetup1stMenu)
 <LI><a href="#[8b]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from firmkey.o(i.DisplaySetup2ndMenu)
 <LI><a href="#[8b]">DisplaySetup</a> from firmkey.o(i.DisplaySetup) referenced from report2.o(i.DisplayXZMenu)
 <LI><a href="#[a6]">Download_Image</a> from print_main.o(i.Download_Image) referenced from print_main.o(.constdata)
 <LI><a href="#[74]">ETH_IRQHandler</a> from stm32f2xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[75]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">EXTI0_IRQHandler</a> from stm32f2xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5f]">EXTI15_10_IRQHandler</a> from stm32f2xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">EXTI3_IRQHandler</a> from stm32f2xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">EXTI9_5_IRQHandler</a> from stm32f2xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9d]">Excute_CR</a> from print_main.o(i.Excute_CR) referenced from print_main.o(.constdata)
 <LI><a href="#[9e]">Excute_DLE</a> from print_main.o(i.Excute_DLE) referenced from print_main.o(.constdata)
 <LI><a href="#[99]">Excute_ESC</a> from print_main.o(i.Excute_ESC) referenced from print_main.o(.constdata)
 <LI><a href="#[9c]">Excute_FF</a> from print_main.o(i.Excute_FF) referenced from print_main.o(.constdata)
 <LI><a href="#[9a]">Excute_GS</a> from print_main.o(i.Excute_GS) referenced from print_main.o(.constdata)
 <LI><a href="#[9b]">Excute_LF</a> from print_main.o(i.Excute_LF) referenced from print_main.o(.constdata)
 <LI><a href="#[126]">ExitFile_USB</a> from menu.o(i.ExitFile_USB) referenced 24 times from menu.o(.constdata)
 <LI><a href="#[d0]">Export_CLERK</a> from usbdiskapp.o(i.Export_CLERK) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[be]">Export_COMM</a> from usbdiskapp.o(i.Export_COMM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[aa]">Export_DEPT</a> from usbdiskapp.o(i.Export_DEPT) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b8]">Export_DISC</a> from usbdiskapp.o(i.Export_DISC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c2]">Export_GRAPPRN</a> from usbdiskapp.o(i.Export_GRAPPRN) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c4]">Export_GROUP</a> from usbdiskapp.o(i.Export_GROUP) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b6]">Export_HEADER</a> from usbdiskapp.o(i.Export_HEADER) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ec]">Export_ICBLOCK</a> from usbdiskapp.o(i.Export_ICBLOCK) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c8]">Export_ICCARD</a> from usbdiskapp.o(i.Export_ICCARD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[de]">Export_KEYBOARD</a> from usbdiskapp.o(i.Export_KEYBOARD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d4]">Export_MODI</a> from usbdiskapp.o(i.Export_MODI) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e0]">Export_OFF</a> from usbdiskapp.o(i.Export_OFF) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[cc]">Export_PBFUNC</a> from usbdiskapp.o(i.Export_PBFUNC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d8]">Export_PBTOTAL</a> from usbdiskapp.o(i.Export_PBTOTAL) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ae]">Export_PLU</a> from usbdiskapp.o(i.Export_PLU) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e4]">Export_PORA</a> from usbdiskapp.o(i.Export_PORA) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ca]">Export_PROM</a> from usbdiskapp.o(i.Export_PROM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ea]">Export_SLIPHEAD</a> from usbdiskapp.o(i.Export_SLIPHEAD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[bc]">Export_SYSTEM</a> from usbdiskapp.o(i.Export_SYSTEM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b2]">Export_TAX</a> from usbdiskapp.o(i.Export_TAX) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e8]">Export_TRAILER</a> from usbdiskapp.o(i.Export_TRAILER) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[dc]">Export_ZONE</a> from usbdiskapp.o(i.Export_ZONE) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[3b]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[67]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12c]">GPRSSendECR_LOG_All</a> from gprs.o(i.GPRSSendECR_LOG_All) referenced from menu.o(.constdata)
 <LI><a href="#[132]">GPRS_DownloadALL</a> from gprs.o(i.GPRS_DownloadALL) referenced from menu.o(.constdata)
 <LI><a href="#[12f]">GPRS_DownloadCLERK</a> from gprs.o(i.GPRS_DownloadCLERK) referenced from menu.o(.constdata)
 <LI><a href="#[12e]">GPRS_DownloadDEPT</a> from gprs.o(i.GPRS_DownloadDEPT) referenced from menu.o(.constdata)
 <LI><a href="#[130]">GPRS_DownloadHEAD</a> from gprs.o(i.GPRS_DownloadHEAD) referenced from menu.o(.constdata)
 <LI><a href="#[12d]">GPRS_DownloadPLU</a> from gprs.o(i.GPRS_DownloadPLU) referenced from menu.o(.constdata)
 <LI><a href="#[131]">GPRS_DownloadPTRAIL</a> from gprs.o(i.GPRS_DownloadPTRAIL) referenced from menu.o(.constdata)
 <LI><a href="#[133]">GPRS_Restart</a> from gprs.o(i.GPRS_Restart) referenced from menu.o(.constdata)
 <LI><a href="#[12b]">GPRS_SetSendMode</a> from gprs.o(i.GPRS_SetSendMode) referenced from menu.o(.constdata)
 <LI><a href="#[87]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[80]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7f]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[cf]">Inport_CLERK</a> from usbdiskapp.o(i.Inport_CLERK) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[bd]">Inport_COMM</a> from usbdiskapp.o(i.Inport_COMM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[a9]">Inport_DEPT</a> from usbdiskapp.o(i.Inport_DEPT) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b7]">Inport_DISC</a> from usbdiskapp.o(i.Inport_DISC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c1]">Inport_GRAPPRN</a> from usbdiskapp.o(i.Inport_GRAPPRN) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c3]">Inport_GROUP</a> from usbdiskapp.o(i.Inport_GROUP) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b5]">Inport_HEADER</a> from usbdiskapp.o(i.Inport_HEADER) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[eb]">Inport_ICBLOCK</a> from usbdiskapp.o(i.Inport_ICBLOCK) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c7]">Inport_ICCARD</a> from usbdiskapp.o(i.Inport_ICCARD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[dd]">Inport_KEYBOARD</a> from usbdiskapp.o(i.Inport_KEYBOARD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d3]">Inport_MODI</a> from usbdiskapp.o(i.Inport_MODI) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[df]">Inport_OFF</a> from usbdiskapp.o(i.Inport_OFF) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[cb]">Inport_PBFUNC</a> from usbdiskapp.o(i.Inport_PBFUNC) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d7]">Inport_PBTOTAL</a> from usbdiskapp.o(i.Inport_PBTOTAL) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ad]">Inport_PLU</a> from usbdiskapp.o(i.Inport_PLU) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e3]">Inport_PORA</a> from usbdiskapp.o(i.Inport_PORA) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c9]">Inport_PROM</a> from usbdiskapp.o(i.Inport_PROM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e9]">Inport_SLIPHEAD</a> from usbdiskapp.o(i.Inport_SLIPHEAD) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[bb]">Inport_SYSTEM</a> from usbdiskapp.o(i.Inport_SYSTEM) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b1]">Inport_TAX</a> from usbdiskapp.o(i.Inport_TAX) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e7]">Inport_TRAILER</a> from usbdiskapp.o(i.Inport_TRAILER) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[db]">Inport_ZONE</a> from usbdiskapp.o(i.Inport_ZONE) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d]">KEYBRD_Decode</a> from usbh_hid_keybd.o(i.KEYBRD_Decode) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[c]">KEYBRD_Init</a> from usbh_hid_keybd.o(i.KEYBRD_Init) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[13a]">ListICBlock</a> from iccardblock.o(i.ListICBlock) referenced from menu.o(.constdata)
 <LI><a href="#[f]">MOUSE_Decode</a> from usbh_hid_mouse.o(i.MOUSE_Decode) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[e]">MOUSE_Init</a> from usbh_hid_mouse.o(i.MOUSE_Init) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[30]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[144]">NewProgSysFlag</a> from program.o(i.NewProgSysFlag) referenced from menu.o(.constdata)
 <LI><a href="#[7a]">OTG_FS_IRQHandler</a> from stm32f2xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[61]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[82]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[81]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[84]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[83]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">PendSV_Handler</a> from stm32f2xx_it.o(i.PendSV_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a7]">Print_Download_Image</a> from print_main.o(i.Print_Download_Image) referenced from print_main.o(.constdata)
 <LI><a href="#[3c]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[60]">RTC_Alarm_IRQHandler</a> from stm32f2xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d1]">ReadClerk</a> from clerk.o(i.ReadClerk) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[136]">ReadCorrec</a> from correc.o(i.ReadCorrec) referenced from menu.o(.constdata)
 <LI><a href="#[138]">ReadCurr</a> from currency.o(i.ReadCurr) referenced from menu.o(.constdata)
 <LI><a href="#[ab]">ReadDept</a> from depart.o(i.ReadDept) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[b9]">ReadDisc</a> from discount.o(i.ReadDisc) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[139]">ReadDrawer</a> from drawer.o(i.ReadDrawer) referenced from menu.o(.constdata)
 <LI><a href="#[143]">ReadFlagsList</a> from extmodules.o(i.ReadFlagsList) referenced from menu.o(.constdata)
 <LI><a href="#[145]">ReadFromMsg</a> from menu.o(i.ReadFromMsg) referenced 8 times from menu.o(.constdata)
 <LI><a href="#[149]">ReadFuncLook</a> from extmodules.o(i.ReadFuncLook) referenced from menu.o(.constdata)
 <LI><a href="#[13e]">ReadGraphic</a> from extmodules.o(i.ReadGraphic) referenced from menu.o(.constdata)
 <LI><a href="#[c5]">ReadGroup</a> from group.o(i.ReadGroup) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[13b]">ReadHeader</a> from extmodules.o(i.ReadHeader) referenced from menu.o(.constdata)
 <LI><a href="#[ed]">ReadICBlock</a> from iccardblock.o(i.ReadICBlock) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[135]">ReadKP</a> from kp.o(i.ReadKP) referenced from menu.o(.constdata)
 <LI><a href="#[146]">ReadKeyDesList</a> from extmodules.o(i.ReadKeyDesList) referenced from menu.o(.constdata)
 <LI><a href="#[148]">ReadKeyMacro</a> from extmodules.o(i.ReadKeyMacro) referenced from menu.o(.constdata)
 <LI><a href="#[d5]">ReadModi</a> from modifier.o(i.ReadModi) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[147]">ReadNumric</a> from extmodules.o(i.ReadNumric) referenced from menu.o(.constdata)
 <LI><a href="#[e1]">ReadOFFPrice</a> from offprice.o(i.ReadOFFPrice) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[142]">ReadPBTable</a> from pb.o(i.ReadPBTable) referenced from menu.o(.constdata)
 <LI><a href="#[d9]">ReadPBTotal</a> from usbdiskapp.o(i.ReadPBTotal) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[cd]">ReadPbF</a> from pb.o(i.ReadPbF) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[af]">ReadPlu</a> from plu.o(i.ReadPlu) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[14a]">ReadPluStock</a> from plu.o(i.ReadPluStock) referenced from menu.o(.constdata)
 <LI><a href="#[e5]">ReadPoRa</a> from pora.o(i.ReadPoRa) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[bf]">ReadPort</a> from port.o(i.ReadPort) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[140]">ReadRepUnit</a> from extmodules.o(i.ReadRepUnit) referenced from menu.o(.constdata)
 <LI><a href="#[13d]">ReadSlipHeader</a> from extmodules.o(i.ReadSlipHeader) referenced from menu.o(.constdata)
 <LI><a href="#[b3]">ReadTax</a> from tax.o(i.ReadTax) referenced 2 times from usbdiskapp.o(.constdata)
 <LI><a href="#[137]">ReadTender</a> from tender.o(i.ReadTender) referenced from menu.o(.constdata)
 <LI><a href="#[13c]">ReadTrail</a> from extmodules.o(i.ReadTrail) referenced from menu.o(.constdata)
 <LI><a href="#[13f]">ReadXZReport</a> from extmodules.o(i.ReadXZReport) referenced from menu.o(.constdata)
 <LI><a href="#[141]">ReadZone</a> from extmodules.o(i.ReadZone) referenced from menu.o(.constdata)
 <LI><a href="#[2d]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[68]">SDIO_IRQHandler</a> from stm32f2xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6a]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">SVC_Handler</a> from stm32f2xx_it.o(i.SVC_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[89]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[39]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">TIM2_IRQHandler</a> from print_main.o(i.TIM2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">TIM3_IRQHandler</a> from print_main.o(i.TIM3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[69]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6d]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6e]">TIM7_IRQHandler</a> from keyboard.o(i.TIM7_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[62]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[65]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[64]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[63]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[134]">TestSendMess</a> from gprs.o(i.TestSendMess) referenced from menu.o(.constdata)
 <LI><a href="#[6b]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6c]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8e]">UART_GetChar_nb</a> from usart.o(i.UART_GetChar_nb) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[90]">UART_PutChar</a> from usart.o(i.UART_PutChar) referenced from monitor.o(i.InitMonitor)
 <LI><a href="#[90]">UART_PutChar</a> from usart.o(i.UART_PutChar) referenced from monitor.o(i.xputs)
 <LI><a href="#[5c]">USART1_IRQHandler</a> from stm32f2xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5e]">USART3_IRQHandler</a> from stm32f2xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7e]">USART6_IRQHandler</a> from stm32f2xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[0]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[7]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[4]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[16]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[19]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[1a]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[15]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[18]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[17]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[14]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[a]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[b]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[94]">USBH_HID_ClassRequest</a> from usbh_hid_core.o(i.USBH_HID_ClassRequest) referenced from usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
 <LI><a href="#[95]">USBH_HID_Handle</a> from usbh_hid_core.o(i.USBH_HID_Handle) referenced from usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
 <LI><a href="#[93]">USBH_HID_InterfaceDeInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceDeInit) referenced from usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
 <LI><a href="#[92]">USBH_HID_InterfaceInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceInit) referenced from usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
 <LI><a href="#[12]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[12]">USBH_MSC_ClassRequest</a> from usbh_msc_core.o(i.USBH_MSC_ClassRequest) referenced from usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
 <LI><a href="#[13]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[13]">USBH_MSC_Handle</a> from usbh_msc_core.o(i.USBH_MSC_Handle) referenced from usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
 <LI><a href="#[11]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[11]">USBH_MSC_InterfaceDeInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit) referenced from usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
 <LI><a href="#[10]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc_core.o(.data)
 <LI><a href="#[10]">USBH_MSC_InterfaceInit</a> from usbh_msc_core.o(i.USBH_MSC_InterfaceInit) referenced from usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
 <LI><a href="#[9]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[24]">USBH_USR_Configuration_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1c]">USBH_USR_DeInit</a> from usbh_msc_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[23]">USBH_USR_DeviceAddressAssigned</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1d]">USBH_USR_DeviceAttached</a> from usbh_msc_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1f]">USBH_USR_DeviceDisconnected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[2b]">USBH_USR_DeviceNotSupported</a> from usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[21]">USBH_USR_DeviceSpeedDetected</a> from usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[22]">USBH_USR_Device_DescAvailable</a> from usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[28]">USBH_USR_EnumerationDone</a> from usbh_msc_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1b]">USBH_USR_Init</a> from usbh_msc_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[2a]">USBH_USR_MSC_Application</a> from usbh_msc_usr.o(i.USBH_USR_MSC_Application) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[25]">USBH_USR_Manufacturer_String</a> from usbh_msc_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[20]">USBH_USR_OverCurrentDetected</a> from usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[26]">USBH_USR_Product_String</a> from usbh_msc_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[1e]">USBH_USR_ResetDevice</a> from usbh_msc_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[27]">USBH_USR_SerialNum_String</a> from usbh_msc_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[2c]">USBH_USR_UnrecoveredError</a> from usbh_msc_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[29]">USBH_USR_UserInput</a> from usbh_msc_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_msc_usr.o(.data)
 <LI><a href="#[91]">UpdateBIOS</a> from ecr_iap.o(i.UpdateBIOS) referenced from computer.o(i.ProcessRecord)
 <LI><a href="#[32]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d2]">WriteClerk</a> from clerk.o(i.WriteClerk) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ac]">WriteDept</a> from depart.o(i.WriteDept) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ba]">WriteDisc</a> from discount.o(i.WriteDisc) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c6]">WriteGroup</a> from group.o(i.WriteGroup) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ee]">WriteICBlock</a> from iccardblock.o(i.WriteICBlock) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[d6]">WriteModi</a> from modifier.o(i.WriteModi) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e2]">WriteOFFPrice</a> from offprice.o(i.WriteOFFPrice) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[da]">WritePBTotal</a> from usbdiskapp.o(i.WritePBTotal) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[ce]">WritePbF</a> from pb.o(i.WritePbF) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b0]">WritePlu</a> from plu.o(i.WritePlu) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[e6]">WritePoRa</a> from pora.o(i.WritePoRa) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[c0]">WritePort</a> from port.o(i.WritePort) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[b4]">WriteTax</a> from tax.o(i.WriteTax) referenced from usbdiskapp.o(.constdata)
 <LI><a href="#[8a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[96]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[97]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[98]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[88]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a2]">partial_cut</a> from print_main.o(i.partial_cut) referenced from print_main.o(.constdata)
 <LI><a href="#[9f]">sel_print_mode</a> from print_main.o(i.sel_print_mode) referenced from print_main.o(.constdata)
 <LI><a href="#[a5]">sel_raster_bit_image</a> from print_main.o(i.sel_raster_bit_image) referenced from print_main.o(.constdata)
 <LI><a href="#[a1]">total_cut</a> from print_main.o(i.total_cut) referenced from print_main.o(.constdata)
 <LI><a href="#[a0]">turn_underline_mode</a> from print_main.o(i.turn_underline_mode) referenced from print_main.o(.constdata)
 <LI><a href="#[a3]">tx_printer_status</a> from print_main.o(i.tx_printer_status) referenced from print_main.o(.constdata)
 <LI><a href="#[a4]">tx_status</a> from print_main.o(i.tx_status) referenced from print_main.o(.constdata)
 <LI><a href="#[127]">usbALLTheFile</a> from usbdiskapp.o(i.usbALLTheFile) referenced 23 times from menu.o(.constdata)
 <LI><a href="#[129]">usbExportALL</a> from usbdiskapp.o(i.usbExportALL) referenced from menu.o(.constdata)
 <LI><a href="#[12a]">usbExportDel</a> from usbdiskapp.o(i.usbExportDel) referenced from menu.o(.constdata)
 <LI><a href="#[124]">usbExportMenu</a> from menu.o(i.usbExportMenu) referenced from menu.o(.constdata)
 <LI><a href="#[128]">usbExportNew</a> from usbdiskapp.o(i.usbExportNew) referenced from menu.o(.constdata)
 <LI><a href="#[125]">usbInportMenu</a> from menu.o(i.usbInportMenu) referenced from menu.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[60d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[161]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[60f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[610]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[611]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[612]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULong64toASC
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_ReadBuffer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTender
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPlu
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroup
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDisc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDept
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrcSum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRECEIPT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbInportMenu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportMenu
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputStr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitFile_USB
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePrintStr
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadECRVIPVar
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[542]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
</UL>

<P><STRONG><a name="[613]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTitlel
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[614]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[615]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPBTotal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDelRD
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearApplMemory
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForSuccess
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForRequest
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
</UL>

<P><STRONG><a name="[616]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[33e]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
</UL>

<P><STRONG><a name="[339]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_WaitSendOk
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForSuccess
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForRequest
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[1e3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
</UL>

<P><STRONG><a name="[266]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[1ad]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTitlel
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTender
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPlu
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPb
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroup
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDisc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDept
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_SubTotalDisc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PercentDisc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_CLOSE
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaveStr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePrintStr
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[331]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[247]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[1ac]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTitlel
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPb
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadXZReport
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTrail
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSlipHeader
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRepUnit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyMacro
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyDesList
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeader
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToTypeName
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFromMsg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKP
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[23b]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[153]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
</UL>

<P><STRONG><a name="[617]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[618]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[619]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[61a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[549]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[61b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[157]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[162]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[61d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[61e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>ADC1_DMA_Config</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, pwr_ctrl.o(i.ADC1_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC1_DMA_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[3ea]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[169]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[5d0]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
</UL>

<P><STRONG><a name="[16c]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>

<P><STRONG><a name="[16a]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[16b]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f2xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[3eb]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[5d1]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_VBATCmd))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
</UL>

<P><STRONG><a name="[332]"></a>ASC_2_HEX</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gprs.o(i.ASC_2_HEX))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[16d]"></a>Add</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, extmodules.o(i.Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[16f]"></a>AddBCDValue12</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, extmodules.o(i.AddBCDValue12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddBCDValue12
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>

<P><STRONG><a name="[172]"></a>AddCorrecTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, correc.o(i.AddCorrecTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddCorrecTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[175]"></a>AddCurrTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, currency.o(i.AddCurrTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddCurrTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[177]"></a>AddDeptTotal</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, depart.o(i.AddDeptTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDeptTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
</UL>

<P><STRONG><a name="[179]"></a>AddDiscTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, discount.o(i.AddDiscTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDiscTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[17b]"></a>AddDrawerTotal</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, drawer.o(i.AddDrawerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddDrawerTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[17d]"></a>AddGroupTotal</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, group.o(i.AddGroupTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddGroupTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
</UL>

<P><STRONG><a name="[17f]"></a>AddNewECRVIP</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, iccard.o(i.AddNewECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AddNewECRVIP &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncordDate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
</UL>

<P><STRONG><a name="[183]"></a>AddPbFTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pb.o(i.AddPbFTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPbFTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[185]"></a>AddPbtTotal</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pb.o(i.AddPbtTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPbtTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbtOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[187]"></a>AddPluTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, plu.o(i.AddPluTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPluTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
</UL>

<P><STRONG><a name="[189]"></a>AddPoRaTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, pora.o(i.AddPoRaTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddPoRaTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[174]"></a>AddPointerTotal</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, general.o(i.AddPointerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
</UL>

<P><STRONG><a name="[18c]"></a>AddReceiptNumber</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fiscal.o(i.AddReceiptNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddReceiptNumber &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
</UL>

<P><STRONG><a name="[18d]"></a>AddTaxItem</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tax.o(i.AddTaxItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddTaxItem &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[18e]"></a>AddTaxTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tax.o(i.AddTaxTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddTaxTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>

<P><STRONG><a name="[190]"></a>AddTenderTotal</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tender.o(i.AddTenderTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddTenderTotal &rArr; AddPointerTotal &rArr; AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[18b]"></a>AddTotal</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, general.o(i.AddTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AddTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointerTotal
</UL>

<P><STRONG><a name="[195]"></a>Add_New_PLU</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, plu.o(i.Add_New_PLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 4440<LI>Call Chain = Add_New_PLU &rArr; CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[322]"></a>AmtInputMask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.AmtInputMask))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[1a0]"></a>AmtRound</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tax.o(i.AmtRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AmtRound &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[1a1]"></a>AppendEntry</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, extmodules.o(i.AppendEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = AppendEntry &rArr;  AppendEntry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>

<P><STRONG><a name="[358]"></a>BCD4toWORD</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, extmodules.o(i.BCD4toWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
</UL>

<P><STRONG><a name="[1a3]"></a>BCDDateTimeToStr</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, extmodules.o(i.BCDDateTimeToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BCDDateTimeToStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
</UL>

<P><STRONG><a name="[30f]"></a>BCDValueToULong</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, extmodules.o(i.BCDValueToULong))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValueToULong
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[1c9]"></a>BCDValue_DIV_10</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, extmodules.o(i.BCDValue_DIV_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValue_DIV_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
</UL>

<P><STRONG><a name="[16e]"></a>BCDValue_MUL_10</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, extmodules.o(i.BCDValue_MUL_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BCDValue_MUL_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>

<P><STRONG><a name="[407]"></a>BCDWidth</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, extmodules.o(i.BCDWidth))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>

<P><STRONG><a name="[1a5]"></a>BKPSRAM_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interface.o(i.BKPSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKPSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[1aa]"></a>BackupECRFiles</STRONG> (Thumb, 1312 bytes, Stack size 56 bytes, usbdiskapp.o(i.BackupECRFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = BackupECRFiles &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ReadFile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
</UL>

<P><STRONG><a name="[1b8]"></a>BackupScreen</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, chndisp.o(i.BackupScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BackupScreen &rArr; mClearScreen &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[1b9]"></a>BalanceCMD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, balance.o(i.BalanceCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BalanceCMD &rArr; EmptyComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[1bc]"></a>BalanceWeight</STRONG> (Thumb, 720 bytes, Stack size 16 bytes, balance.o(i.BalanceWeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = BalanceWeight &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>BarCode</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, barcode.o(i.BarCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUSBKey
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUSBKey
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>Bcd2Long</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, extmodules.o(i.Bcd2Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bcd2Long
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Plu
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
</UL>

<P><STRONG><a name="[1c8]"></a>BcdDiv10</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extmodules.o(i.BcdDiv10))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_DIV_10
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Plu
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Dept
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
</UL>

<P><STRONG><a name="[1f6]"></a>BcdDiv100</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extmodules.o(i.BcdDiv100))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[1ca]"></a>BcdMul10</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, extmodules.o(i.BcdMul10))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BcdMul10 &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
</UL>

<P><STRONG><a name="[1f5]"></a>BcdMul100</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, extmodules.o(i.BcdMul100))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[1cb]"></a>Beep</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, interface.o(i.Beep))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[1c0]"></a>Bell</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interface.o(i.Bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bell
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
</UL>

<P><STRONG><a name="[1cc]"></a>BinarySearch</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, search.o(i.BinarySearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
</UL>

<P><STRONG><a name="[1cf]"></a>Bios</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, interface.o(i.Bios))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[1d2]"></a>Bios_1</STRONG> (Thumb, 660 bytes, Stack size 24 bytes, interface.o(i.Bios_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableBeep
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRtc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[1da]"></a>Bios_PortRead</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usart.o(i.Bios_PortRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOnLine
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM800_PowerOn
</UL>

<P><STRONG><a name="[1dc]"></a>Bios_PortWrite</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usart.o(i.Bios_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
</UL>

<P><STRONG><a name="[1de]"></a>Bios_TestMAC</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, interface.o(i.Bios_TestMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bios_TestMAC &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[365]"></a>Btoa</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, progopt.o(i.Btoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Btoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[31]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>CSV_Dept</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, usbdiskapp.o(i.CSV_Dept))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = CSV_Dept &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>CSV_DirectDisc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbdiskapp.o(i.CSV_DirectDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = CSV_DirectDisc &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>CSV_EcrNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_EcrNum))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_ReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>CSV_End</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_End &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>CSV_FlowQtyAmt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbdiskapp.o(i.CSV_FlowQtyAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Void
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Tender
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_SubTotals
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_SubTotalDirDisc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PoRa
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Plu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbClose
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_End
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_DirectDisc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Dept
</UL>

<P><STRONG><a name="[ff]"></a>CSV_InsertIC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_InsertIC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>CSV_Message</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_Message))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>CSV_ModeLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_ModeLock))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>CSV_NULL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_NULL))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>CSV_New</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, usbdiskapp.o(i.CSV_New))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CSV_New &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDDateTimeToStr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_ReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>CSV_NonAdd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_NonAdd))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>CSV_Operator</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_Operator))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>CSV_PbClose</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_PbClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_PbClose &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>CSV_PbOpen</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_PbOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = CSV_PbOpen &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>CSV_PbTransTo</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, usbdiskapp.o(i.CSV_PbTransTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_PbTransTo &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>CSV_PercentDisc</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, usbdiskapp.o(i.CSV_PercentDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CSV_PercentDisc &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>CSV_Plu</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, usbdiskapp.o(i.CSV_Plu))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = CSV_Plu &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Long
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>CSV_PoRa</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbdiskapp.o(i.CSV_PoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = CSV_PoRa &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>CSV_RPEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_RPEnd))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>CSV_ReceipLog</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_ReceipLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_ReceipLog &rArr; CSV_New &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_EcrNum
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
</UL>

<P><STRONG><a name="[100]"></a>CSV_RefreshIC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_RefreshIC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>CSV_SetPrice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdiskapp.o(i.CSV_SetPrice))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>CSV_SubTotalDirDisc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbdiskapp.o(i.CSV_SubTotalDirDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = CSV_SubTotalDirDisc &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>CSV_SubTotalDisc</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, usbdiskapp.o(i.CSV_SubTotalDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = CSV_SubTotalDisc &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>CSV_SubTotals</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_SubTotals))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_SubTotals &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>CSV_TAX</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, usbdiskapp.o(i.CSV_TAX))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = CSV_TAX &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>CSV_Tender</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbdiskapp.o(i.CSV_Tender))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = CSV_Tender &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>CSV_Void</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbdiskapp.o(i.CSV_Void))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = CSV_Void &rArr; CSV_FlowQtyAmt &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>CalculateCrcSum</STRONG> (Thumb, 52 bytes, Stack size 2064 bytes, gprs.o(i.CalculateCrcSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
</UL>

<P><STRONG><a name="[1e8]"></a>CalculateSubDisc</STRONG> (Thumb, 1610 bytes, Stack size 88 bytes, discount.o(i.CalculateSubDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = CalculateSubDisc &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
</UL>

<P><STRONG><a name="[1ed]"></a>CalculateTax</STRONG> (Thumb, 956 bytes, Stack size 48 bytes, tax.o(i.CalculateTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[1eb]"></a>CalculateTax2</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, tax.o(i.CalculateTax2))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CalculateTax2 &rArr; Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
</UL>

<P><STRONG><a name="[1ff]"></a>CenterForDisplay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, extmodules.o(i.CenterForDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[1f3]"></a>ChangeGRBToMyself</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, print_main.o(i.ChangeGRBToMyself))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChangeGRBToMyself
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
</UL>

<P><STRONG><a name="[1f4]"></a>ChangePoint</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, extmodules.o(i.ChangePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChangePoint &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv100
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
</UL>

<P><STRONG><a name="[1f7]"></a>ChangePoint2</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, extmodules.o(i.ChangePoint2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChangePoint2 &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[1f8]"></a>CheckBitValue</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, program.o(i.CheckBitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
</UL>

<P><STRONG><a name="[1fa]"></a>CheckBreak</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, report.o(i.CheckBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CheckBreak &rArr; CheckBreakKey &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[1fb]"></a>CheckBreakKey</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, general.o(i.CheckBreakKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CheckBreakKey &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
</UL>

<P><STRONG><a name="[40a]"></a>CheckChar</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, print.o(i.CheckChar))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
</UL>

<P><STRONG><a name="[1bd]"></a>CheckComm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, extmodules.o(i.CheckComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckComm &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
</UL>

<P><STRONG><a name="[19b]"></a>CheckError</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, general.o(i.CheckError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CheckError &rArr; mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[19e]"></a>CheckFirmKey</STRONG> (Thumb, 3352 bytes, Stack size 16 bytes, firmkey.o(i.CheckFirmKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 4424 + In Cycle
<LI>Call Chain = CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[220]"></a>CheckFunctionEntry</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(i.CheckFunctionEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CheckFunctionEntry &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[1c7]"></a>CheckInStore</STRONG> (Thumb, 466 bytes, Stack size 8 bytes, barcode.o(i.CheckInStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckInStore &rArr; StrToBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[221]"></a>CheckInput</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, chninput.o(i.CheckInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumric
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
</UL>

<P><STRONG><a name="[1d9]"></a>CheckKeyboard</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, keyboard.o(i.CheckKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckKeyboard
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[226]"></a>CheckLogBuff</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, flowbill.o(i.CheckLogBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
</UL>

<P><STRONG><a name="[227]"></a>CheckMaxEntry</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, general.o(i.CheckMaxEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CheckMaxEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
</UL>

<P><STRONG><a name="[229]"></a>CheckMixMatch</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, plu.o(i.CheckMixMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = CheckMixMatch &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[22b]"></a>CheckMode</STRONG> (Thumb, 2244 bytes, Stack size 24 bytes, firmkey.o(i.CheckMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632<LI>Call Chain = CheckMode &rArr; MGFunctions &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXZMenu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
</UL>

<P><STRONG><a name="[238]"></a>CheckModifier</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, buffer.o(i.CheckModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CheckModifier &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[20a]"></a>CheckMultiply</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, fixed.o(i.CheckMultiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CheckMultiply &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[1ee]"></a>CheckNotZero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, extmodules.o(i.CheckNotZero))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[245]"></a>CheckOnLine</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, extmodules.o(i.CheckOnLine))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[232]"></a>CheckPWD</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, extmodules.o(i.CheckPWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CheckPWD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[207]"></a>CheckPluFile</STRONG> (Thumb, 1158 bytes, Stack size 144 bytes, hardtest.o(i.CheckPluFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = CheckPluFile &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[23e]"></a>CheckPrinter</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.CheckPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CheckPrinter &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>CheckRandomPlu</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, plu.o(i.CheckRandomPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CheckRandomPlu &rArr; PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[244]"></a>CheckSlip</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, print.o(i.CheckSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CheckSlip &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnLine
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[423]"></a>CheckSum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interface.o(i.CheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
</UL>

<P><STRONG><a name="[22e]"></a>CheckTime</STRONG> (Thumb, 920 bytes, Stack size 40 bytes, timer.o(i.CheckTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>CheckTotal</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, report.o(i.CheckTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckTotal &rArr; ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodSkip
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
</UL>

<P><STRONG><a name="[1c5]"></a>CheckUSBKey</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.CheckUSBKey))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
</UL>

<P><STRONG><a name="[24d]"></a>Check_Paper</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, print_main.o(i.Check_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
</UL>

<P><STRONG><a name="[24e]"></a>Check_Print</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, print_main.o(i.Check_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Check_Print
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TESTPAPER
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>ChnInput</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, chninput.o(i.ChnInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[395]"></a>CleanKeyboard</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, keyboard.o(i.CleanKeyboard))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[210]"></a>ClearAllReport</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, report2.o(i.ClearAllReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[253]"></a>ClearApplMemory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, initappl.o(i.ClearApplMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearApplMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[196]"></a>ClearEntry</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, general.o(i.ClearEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[26d]"></a>ClearFlashChar</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, print.o(i.ClearFlashChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearFlashChar
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>

<P><STRONG><a name="[20c]"></a>ClearLine</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, chndisp.o(i.ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClearLine &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>

<P><STRONG><a name="[254]"></a>ClearLogFor</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, flowbill.o(i.ClearLogFor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ClearLogFor &rArr; ReadFrLogRam &rArr; bFlashReadBuffer &rArr; spi_bFlashReadBuffer &rArr; sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
</UL>

<P><STRONG><a name="[256]"></a>ClearPb</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, pb.o(i.ClearPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ClearPb &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[396]"></a>ClearVirtualInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.ClearVirtualInput))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[334]"></a>CloseGPRS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gprs.o(i.CloseGPRS))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[205]"></a>ClsArea</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, chndisp.o(i.ClsArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ClsArea &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
</UL>

<P><STRONG><a name="[1b3]"></a>ClsState1</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, chndisp.o(i.ClsState1))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[1a2]"></a>ClsState12</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, chndisp.o(i.ClsState12))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState12 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[1b2]"></a>ClsState2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, chndisp.o(i.ClsState2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[257]"></a>ClsXRam</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, interface.o(i.ClsXRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ClsXRam &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[25d]"></a>CmdExtPrinter</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kp.o(i.CmdExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
</UL>

<P><STRONG><a name="[246]"></a>CmdSlip</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, print.o(i.CmdSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
</UL>

<P><STRONG><a name="[1f1]"></a>Collect_Data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flowbill.o(i.Collect_Data))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
</UL>

<P><STRONG><a name="[4b4]"></a>Collect_Given</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, flowbill.o(i.Collect_Given))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[276]"></a>CombineWith4</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, print_main.o(i.CombineWith4))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>

<P><STRONG><a name="[275]"></a>CombineWith8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, print_main.o(i.CombineWith8))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>

<P><STRONG><a name="[228]"></a>CompareBCD</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, extmodules.o(i.CompareBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMaxEntry
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
</UL>

<P><STRONG><a name="[1ce]"></a>CompareBCDValue</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, extmodules.o(i.CompareBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CompareBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[265]"></a>Computer</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, computer.o(i.Computer))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = Computer &rArr; ProcessRecord &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>Correct_BCDValue1</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, extmodules.o(i.Correct_BCDValue1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Correct_BCDValue1 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_DIV_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>

<P><STRONG><a name="[268]"></a>Correction</STRONG> (Thumb, 828 bytes, Stack size 8 bytes, correc.o(i.Correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 4576<LI>Call Chain = Correction &rArr; ProcessPlu &rArr; ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
</UL>

<P><STRONG><a name="[26f]"></a>CreatGraphicWithText</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, print_main.o(i.CreatGraphicWithText))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontOffset_char
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
</UL>

<P><STRONG><a name="[271]"></a>Create384Dots</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, print_main.o(i.Create384Dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Create384Dots
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineWith8
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CombineWith4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[277]"></a>CreateFlowFile</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbdiskapp.o(i.CreateFlowFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = CreateFlowFile &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ResetFolder
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_LocateFile
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_FileSize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
</UL>

<P><STRONG><a name="[27c]"></a>CreateGraphicDots</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, print_main.o(i.CreateGraphicDots))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CreateGraphicDots &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
</UL>

<P><STRONG><a name="[27d]"></a>Currency</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, currency.o(i.Currency))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Currency &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[281]"></a>CutExtPrinter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, kp.o(i.CutExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CutExtPrinter &rArr; CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[282]"></a>CutRPaper</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interface.o(i.CutRPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CutRPaper &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
</UL>

<P><STRONG><a name="[a8]"></a>Cut_Paper</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, print_main.o(i.Cut_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Cut_Paper &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[285]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[287]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[4d7]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[28a]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[28c]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[72]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47f]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[168]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[166]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[481]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[480]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[167]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[29e]"></a>DateTimeToStr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, extmodules.o(i.DateTimeToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[359]"></a>DaysAMonth</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, extmodules.o(i.DaysAMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DaysAMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
</UL>

<P><STRONG><a name="[29f]"></a>DeCodeProto</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, port.o(i.DeCodeProto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeCodeProto
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[2a0]"></a>DeDateToStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, extmodules.o(i.DeDateToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DeDateToStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
</UL>

<P><STRONG><a name="[34]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c3]"></a>DecRecIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.DecRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2a1]"></a>DeleteHeader</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2a2]"></a>DeleteSlipHead</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteSlipHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteSlipHead
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2a3]"></a>DeleteTrailer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, program.o(i.DeleteTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DeleteTrailer
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[349]"></a>DeptPluKeysCount</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, extmodules.o(i.DeptPluKeysCount))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[26b]"></a>Discount</STRONG> (Thumb, 2598 bytes, Stack size 48 bytes, discount.o(i.Discount))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = Discount &rArr; RegiStart &rArr; RegiInit &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[280]"></a>DispAmtStr</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, format.o(i.DispAmtStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DispAmtStr &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[1b1]"></a>DispCharXY</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, chndisp.o(i.DispCharXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[2ad]"></a>DispDateRecNo</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, flowbill.o(i.DispDateRecNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>

<P><STRONG><a name="[10a]"></a>DispDept</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, flowbill.o(i.DispDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DispDept &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>DispDirectDisc</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, flowbill.o(i.DispDirectDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DispDirectDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>DispDrawerTotal</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, drawer.o(i.DispDrawerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DispDrawerTotal &rArr; DisplayPointerTotal &rArr; DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[11c]"></a>DispEcrNum</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispEcrNum))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>DispEnd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flowbill.o(i.DispEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispEnd &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[2b1]"></a>DispGrandTotal</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, report.o(i.DispGrandTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DispGrandTotal &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
</UL>

<P><STRONG><a name="[2b2]"></a>DispIndex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, menu.o(i.DispIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DispIndex &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[119]"></a>DispInsertIC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispInsertIC))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>DispLFStr</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, chndisp.o(i.DispLFStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispLFStr &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[117]"></a>DispMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispMessage))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>DispModeLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispModeLock))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>DispNULL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispNULL))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>DispNew</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, flowbill.o(i.DispNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DispNew &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDDateTimeToStr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>DispNonAdd</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, flowbill.o(i.DispNonAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = DispNonAdd &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULong64toASC
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>DispOperator</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, flowbill.o(i.DispOperator))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DispOperator &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>DispPbClose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flowbill.o(i.DispPbClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispPbClose &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>DispPbOpen</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, flowbill.o(i.DispPbOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DispPbOpen &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>DispPbTransTo</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, flowbill.o(i.DispPbTransTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DispPbTransTo &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>DispPercentDisc</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, flowbill.o(i.DispPercentDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DispPercentDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>DispPlu</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, flowbill.o(i.DispPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DispPlu &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Long
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>DispPoRa</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flowbill.o(i.DispPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispPoRa &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>DispQtyStr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, format.o(i.DispQtyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DispQtyStr &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
</UL>

<P><STRONG><a name="[123]"></a>DispRECEIPT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flowbill.o(i.DispRECEIPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DispRECEIPT &rArr; PrintSaveStr &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaveStr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>DispRPEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispRPEnd))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>DispRefreshIC</STRONG> (Thumb, 968 bytes, Stack size 32 bytes, flowbill.o(i.DispRefreshIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = DispRefreshIC &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASCL
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>DispSetPrice</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flowbill.o(i.DispSetPrice))
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>DispStrXY</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, chndisp.o(i.DispStrXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_CLOSE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[2b8]"></a>DispStr_Right</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, chndisp.o(i.DispStr_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DispStr_Right &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
</UL>

<P><STRONG><a name="[2a9]"></a>DispSubTotal</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, extmodules.o(i.DispSubTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispSubTotal &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
</UL>

<P><STRONG><a name="[114]"></a>DispSubTotalDirDisc</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, flowbill.o(i.DispSubTotalDirDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = DispSubTotalDirDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>DispSubTotalDisc</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, flowbill.o(i.DispSubTotalDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DispSubTotalDisc &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>DispSubTotals</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flowbill.o(i.DispSubTotals))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispSubTotals &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>DispTAX</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, flowbill.o(i.DispTAX))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DispTAX &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>DispTender</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, flowbill.o(i.DispTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = DispTender &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>DispVoid</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flowbill.o(i.DispVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = DispVoid &rArr; PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flowbill.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>DisplayChar</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, chndisp.o(i.DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DisplayChar &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[1b7]"></a>DisplayDecXY</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, extmodules.o(i.DisplayDecXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WidthofWORD
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
</UL>

<P><STRONG><a name="[2ba]"></a>DisplayECRVIP</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, iccard.o(i.DisplayECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DisplayECRVIP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[8d]"></a>DisplayNull</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, firmkey.o(i.DisplayNull))
<BR>[Address Reference Count : 1]<UL><LI> firmkey.o(i.CheckMode)
</UL>
<P><STRONG><a name="[206]"></a>DisplayOption</STRONG> (Thumb, 1440 bytes, Stack size 16 bytes, firmkey.o(i.DisplayOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 2648<LI>Call Chain = DisplayOption &rArr; ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysMes
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlipHead
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSalPer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintICMessage
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[2b0]"></a>DisplayPointerTotal</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, general.o(i.DisplayPointerTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DisplayPointerTotal &rArr; DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
</UL>

<P><STRONG><a name="[2eb]"></a>DisplayPrompt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, general.o(i.DisplayPrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DisplayPrompt &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[8c]"></a>DisplayRecNo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, firmkey.o(i.DisplayRecNo))
<BR>[Address Reference Count : 1]<UL><LI> firmkey.o(i.CheckFirmKey)
</UL>
<P><STRONG><a name="[8b]"></a>DisplaySetup</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, firmkey.o(i.DisplaySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetInvAttr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearInvAttr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayXZMenu
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup2ndMenu
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup1stMenu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitFile_USB
</UL>
<BR>[Address Reference Count : 4]<UL><LI> report2.o(i.DisplayXZMenu)
<LI> firmkey.o(i.DisplaySetup1stMenu)
<LI> firmkey.o(i.DisplaySetup2ndMenu)
<LI> firmkey.o(i.CheckFirmKey)
</UL>
<P><STRONG><a name="[21f]"></a>DisplaySetup1stMenu</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, firmkey.o(i.DisplaySetup1stMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplaySetup1stMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[20f]"></a>DisplaySetup2ndMenu</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, firmkey.o(i.DisplaySetup2ndMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplaySetup2ndMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[2ea]"></a>DisplayTotal</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, general.o(i.DisplayTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DisplayTotal &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPointerTotal
</UL>

<P><STRONG><a name="[233]"></a>DisplayXZMenu</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, report2.o(i.DisplayXZMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = DisplayXZMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[2ee]"></a>Display_RGBuf</STRONG> (Thumb, 694 bytes, Stack size 72 bytes, extmodules.o(i.Display_RGBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Display_RGBuf &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
</UL>

<P><STRONG><a name="[1ea]"></a>Divide</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, extmodules.o(i.Divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[43d]"></a>DowmLoadBINCLIB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, computer.o(i.DowmLoadBINCLIB))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[2ef]"></a>DowmLoadGRB</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, computer.o(i.DowmLoadGRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DowmLoadGRB &rArr; ClsState2 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[a6]"></a>Download_Image</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, print_main.o(i.Download_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Download_Image &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[2f1]"></a>Drawer</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, drawer.o(i.Drawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Drawer &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[3d9]"></a>DrawerOpen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interface.o(i.DrawerOpen))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
</UL>

<P><STRONG><a name="[3d5]"></a>Drive_Motor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, print_main.o(i.Drive_Motor))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
</UL>

<P><STRONG><a name="[2f3]"></a>ECRFuncCodeToName</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, extmodules.o(i.ECRFuncCodeToName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ECRFuncCodeToName &rArr; ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFuncLook
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
</UL>

<P><STRONG><a name="[2f5]"></a>ECRFuncCodeToTypeName</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, extmodules.o(i.ECRFuncCodeToTypeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ECRFuncCodeToTypeName
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[2f6]"></a>ECRVIPLogin</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, iccard.o(i.ECRVIPLogin))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ECRVIPLogin &rArr; GetStringCHN &rArr; LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadECRVIPVar
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[2fa]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32f2x7_eth.o(i.ETH_CheckFrameReceived))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2x7_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[5c7]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f2x7_eth.o(i.ETH_Get_Received_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[74]"></a>ETH_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ETH_IRQHandler &rArr; LwIP_Periodic_Handle &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ETHERNET_Ready
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[308]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f2x7_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
</UL>

<P><STRONG><a name="[3d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f2xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI0_IRQHandler &rArr; Save_Config &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ApplRam
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = EXTI3_IRQHandler &rArr; Eth_Link_ITHandler &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[302]"></a>EXTILine_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, keyboard.o(i.EXTILine_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EXTILine_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[2ff]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[300]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[305]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmInit
</UL>

<P><STRONG><a name="[1ba]"></a>EmptyComm</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, extmodules.o(i.EmptyComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EmptyComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
</UL>

<P><STRONG><a name="[1d4]"></a>EnableBeep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyboard.o(i.EnableBeep))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[181]"></a>EncordDate</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, extmodules.o(i.EncordDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EncordDate
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[301]"></a>Eth_Link_ITHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f2x7_eth_bsp.o(i.Eth_Link_ITHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Eth_Link_ITHandler &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[30b]"></a>Exchange2Port</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, program.o(i.Exchange2Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Exchange2Port &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[9d]"></a>Excute_CR</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, print_main.o(i.Excute_CR))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_cut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partial_cut
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_LF
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_FF
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>Excute_DLE</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, print_main.o(i.Excute_DLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Excute_DLE &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>Excute_ESC</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, print_main.o(i.Excute_ESC))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Excute_ESC &rArr; Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>Excute_FF</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, print_main.o(i.Excute_FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Excute_FF &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>Excute_GS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, print_main.o(i.Excute_GS))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Excute_GS &rArr; Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>Excute_LF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, print_main.o(i.Excute_LF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Excute_LF &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[30d]"></a>Excute_data</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, print_main.o(i.Excute_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Excute_data &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_GS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_ESC
</UL>

<P><STRONG><a name="[126]"></a>ExitFile_USB</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.ExitFile_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ExitFile_USB &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>ExploreLog</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, flowbill.o(i.ExploreLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616<LI>Call Chain = ExploreLog &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActiveItemStr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[d0]"></a>Export_CLERK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_CLERK))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Export_COMM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_COMM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>Export_DEPT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_DEPT))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Export_DISC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_DISC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>Export_GRAPPRN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_GRAPPRN))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>Export_GROUP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_GROUP))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Export_HEADER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_HEADER))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>Export_ICBLOCK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_ICBLOCK))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>Export_ICCARD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_ICCARD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>Export_KEYBOARD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_KEYBOARD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Export_MODI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_MODI))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>Export_OFF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_OFF))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Export_PBFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_PBFUNC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>Export_PBTOTAL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_PBTOTAL))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>Export_PLU</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_PLU))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>Export_PORA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_PORA))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Export_PROM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_PROM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>Export_SLIPHEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_SLIPHEAD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>Export_SYSTEM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_SYSTEM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Export_TAX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_TAX))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>Export_TRAILER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_TRAILER))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>Export_ZONE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Export_ZONE))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[313]"></a>FSMC_IOInit</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, fsmc_sram.o(i.FSMC_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FSMC_IOInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[316]"></a>FSMC_Init</STRONG> (Thumb, 94 bytes, Stack size 96 bytes, fsmc_sram.o(i.FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FSMC_Init &rArr; FSMC_IOInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[318]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[317]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>

<P><STRONG><a name="[319]"></a>FeedSlip</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, print.o(i.FeedSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FeedSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
</UL>

<P><STRONG><a name="[31e]"></a>Fixed</STRONG> (Thumb, 2774 bytes, Stack size 32 bytes, fixed.o(i.Fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4616<LI>Call Chain = Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaveStr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[327]"></a>FormPrtConfInf</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, hardtest.o(i.FormPrtConfInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = FormPrtConfInf &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[329]"></a>FormatAmt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, format.o(i.FormatAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatAmt &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
</UL>

<P><STRONG><a name="[2a7]"></a>FormatAmtStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, format.o(i.FormatAmtStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FormatAmtStr &rArr; FormatAmt &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
</UL>

<P><STRONG><a name="[2aa]"></a>FormatBCD</STRONG> (Thumb, 1078 bytes, Stack size 36 bytes, extmodules.o(i.FormatBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD_DEC
</UL>

<P><STRONG><a name="[32a]"></a>FormatBCD_DEC</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, usbdiskapp.o(i.FormatBCD_DEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FormatBCD_DEC &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
</UL>

<P><STRONG><a name="[1f2]"></a>FormatQty</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, format.o(i.FormatQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[242]"></a>FormatQtyStr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, format.o(i.FormatQtyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FormatQtyStr &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[32b]"></a>FormatStrQtyPriAmt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, format.o(i.FormatStrQtyPriAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FormatStrQtyPriAmt &rArr; FormatQty &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
</UL>

<P><STRONG><a name="[1e1]"></a>FormatToCSV</STRONG> (Thumb, 892 bytes, Stack size 56 bytes, usbdiskapp.o(i.FormatToCSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FormatToCSV &rArr; FormatBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_SubTotalDisc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PercentDisc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbTransTo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbOpen
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
</UL>

<P><STRONG><a name="[303]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_KeyINPUT
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[315]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[472]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>

<P><STRONG><a name="[4a7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[4a8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[32c]"></a>GPRSDataDelRD</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gprs.o(i.GPRSDataDelRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPRSDataDelRD
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[330]"></a>GPRSDecodeECRRecord</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, gprs.o(i.GPRSDecodeECRRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPRSDecodeECRRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[32d]"></a>GPRSDownloadEcrPLUData</STRONG> (Thumb, 920 bytes, Stack size 104 bytes, gprs.o(i.GPRSDownloadEcrPLUData))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDecodeECRRecord
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASC_2_HEX
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToTypeName
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadPTRAIL
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadPLU
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadHEAD
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadDEPT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadCLERK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DownloadALL
</UL>

<P><STRONG><a name="[335]"></a>GPRSHand</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gprs.o(i.GPRSHand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPRSHand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
</UL>

<P><STRONG><a name="[336]"></a>GPRSReadAString</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gprs.o(i.GPRSReadAString))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForSuccess
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForRequest
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[337]"></a>GPRSSendAString</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gprs.o(i.GPRSSendAString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPRSSendAString &rArr; GPRSSendByte &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_CLOSE
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[338]"></a>GPRSSendByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gprs.o(i.GPRSSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPRSSendByte &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
</UL>

<P><STRONG><a name="[32f]"></a>GPRSSendECRData</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, gprs.o(i.GPRSSendECRData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPRSSendECRData &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_WaitSendOk
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendByte
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDelRD
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[33b]"></a>GPRSSendECR_HeartBeat</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gprs.o(i.GPRSSendECR_HeartBeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPRSSendECR_HeartBeat &rArr; GPRSStartGprs &rArr; GPRS_TCP_STATUS &rArr; GPRS_TCP_CLOSE &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33c]"></a>GPRSSendECR_LOG</STRONG> (Thumb, 608 bytes, Stack size 2328 bytes, gprs.o(i.GPRSSendECR_LOG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForSuccess
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForRequest
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGPRS
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateCrcSum
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
</UL>

<P><STRONG><a name="[12c]"></a>GPRSSendECR_LOG_All</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gprs.o(i.GPRSSendECR_LOG_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 4400<LI>Call Chain = GPRSSendECR_LOG_All &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECRFlow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[32e]"></a>GPRSStartGprs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gprs.o(i.GPRSStartGprs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GPRSStartGprs &rArr; GPRS_TCP_STATUS &rArr; GPRS_TCP_CLOSE &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[351]"></a>GPRSWaitForReady</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gprs.o(i.GPRSWaitForReady))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_Restart
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33f]"></a>GPRSWaitForRequest</STRONG> (Thumb, 62 bytes, Stack size 528 bytes, gprs.o(i.GPRSWaitForRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPRSWaitForRequest &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
</UL>

<P><STRONG><a name="[340]"></a>GPRSWaitForSuccess</STRONG> (Thumb, 62 bytes, Stack size 528 bytes, gprs.o(i.GPRSWaitForSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = GPRSWaitForSuccess &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
</UL>

<P><STRONG><a name="[132]"></a>GPRS_DownloadALL</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadALL &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>GPRS_DownloadCLERK</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadCLERK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadCLERK &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>GPRS_DownloadDEPT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadDEPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadDEPT &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>GPRS_DownloadHEAD</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadHEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadHEAD &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>GPRS_DownloadPLU</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadPLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadPLU &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>GPRS_DownloadPTRAIL</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gprs.o(i.GPRS_DownloadPTRAIL))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = GPRS_DownloadPTRAIL &rArr; GPRSDownloadEcrPLUData &rArr; GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[344]"></a>GPRS_DrawSignal</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, gprs.o(i.GPRS_DrawSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPRS_DrawSignal &rArr; GPRSReadAString &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSHand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[333]"></a>GPRS_ProcessRecord</STRONG> (Thumb, 3706 bytes, Stack size 80 bytes, gprs.o(i.GPRS_ProcessRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = GPRS_ProcessRecord &rArr; ClearAllReport &rArr; GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStartAddress
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSalPer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSalPer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
</UL>

<P><STRONG><a name="[133]"></a>GPRS_Restart</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gprs.o(i.GPRS_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPRS_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>GPRS_SetSendMode</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gprs.o(i.GPRS_SetSendMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GPRS_SetSendMode &rArr; GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[352]"></a>GPRS_TCP_CLOSE</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gprs.o(i.GPRS_TCP_CLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPRS_TCP_CLOSE &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_STATUS
</UL>

<P><STRONG><a name="[343]"></a>GPRS_TCP_STATUS</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, gprs.o(i.GPRS_TCP_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GPRS_TCP_STATUS &rArr; GPRS_TCP_CLOSE &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_TCP_CLOSE
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendAString
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSStartGprs
</UL>

<P><STRONG><a name="[33a]"></a>GPRS_WaitSendOk</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gprs.o(i.GPRS_WaitSendOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GPRS_WaitSendOk &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECRData
</UL>

<P><STRONG><a name="[310]"></a>GetActiveItemStr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.GetActiveItemStr))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
</UL>

<P><STRONG><a name="[353]"></a>GetBCDValue</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, program.o(i.GetBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetBCDValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
</UL>

<P><STRONG><a name="[354]"></a>GetByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, progopt.o(i.GetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetByte &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[355]"></a>GetByteValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, program.o(i.GetByteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetByteValue &rArr; GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[460]"></a>GetClerkOffSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clerk.o(i.GetClerkOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
</UL>

<P><STRONG><a name="[173]"></a>GetCorrecOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, correc.o(i.GetCorrecOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
</UL>

<P><STRONG><a name="[176]"></a>GetCurrOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, currency.o(i.GetCurrOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
</UL>

<P><STRONG><a name="[27e]"></a>GetCurrency</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, currency.o(i.GetCurrency))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetCurrency &rArr; Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
</UL>

<P><STRONG><a name="[357]"></a>GetDaysFrom1900</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, extmodules.o(i.GetDaysFrom1900))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDaysFrom1900 &rArr; DaysAMonth
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaysAMonth
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekDay
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[178]"></a>GetDeptOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depart.o(i.GetDeptOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
</UL>

<P><STRONG><a name="[35a]"></a>GetDevicePort</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, progopt.o(i.GetDevicePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[17a]"></a>GetDiscOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, discount.o(i.GetDiscOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
</UL>

<P><STRONG><a name="[17c]"></a>GetDrawerOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drawer.o(i.GetDrawerOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
</UL>

<P><STRONG><a name="[35b]"></a>GetEntry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.GetEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetEntry &rArr; GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
</UL>

<P><STRONG><a name="[19c]"></a>GetFirmkeyID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, firmkey.o(i.GetFirmkeyID))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[17e]"></a>GetGroupOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, group.o(i.GetGroupOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
</UL>

<P><STRONG><a name="[35c]"></a>GetHEXValue</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, program.o(i.GetHEXValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetHEXValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
</UL>

<P><STRONG><a name="[35d]"></a>GetHexBytes</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, progopt.o(i.GetHexBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetHexBytes &rArr; StrToBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[462]"></a>GetICBlockOffSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iccardblock.o(i.GetICBlockOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
</UL>

<P><STRONG><a name="[35e]"></a>GetIP</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, program.o(i.GetIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetIP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPToNum
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumToIP
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
</UL>

<P><STRONG><a name="[311]"></a>GetInputByListItems</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, menu.o(i.GetInputByListItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetInputByListItems &rArr; ClearEntry &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[361]"></a>GetInputForMenu</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, firmkey.o(i.GetInputForMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetInputForMenu &rArr; DisplaySetup &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
</UL>

<P><STRONG><a name="[362]"></a>GetLinkNumber</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, plu.o(i.GetLinkNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetLinkNumber &rArr; GetPluNumber &rArr; BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[463]"></a>GetModiOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, modifier.o(i.GetModiOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
</UL>

<P><STRONG><a name="[364]"></a>GetModifier</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, modifier.o(i.GetModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = GetModifier &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[224]"></a>GetNumric</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, chninput.o(i.GetNumric))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputEXASCII
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
</UL>

<P><STRONG><a name="[464]"></a>GetOFFPriceOffSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, offprice.o(i.GetOFFPriceOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
</UL>

<P><STRONG><a name="[2d1]"></a>GetOpt</STRONG> (Thumb, 2062 bytes, Stack size 32 bytes, progopt.o(i.GetOpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GetOpt &rArr; NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint2
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToBin
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexBytes
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Btoa
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[184]"></a>GetPbFOffSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pb.o(i.GetPbFOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
</UL>

<P><STRONG><a name="[368]"></a>GetPbNumber</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, pb.o(i.GetPbNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetPbNumber &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[186]"></a>GetPbtOffSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pb.o(i.GetPbtOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
</UL>

<P><STRONG><a name="[1e4]"></a>GetPluNumber</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, plu.o(i.GetPluNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetPluNumber &rArr; BinarySearch &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Plu
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[188]"></a>GetPluOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, plu.o(i.GetPluOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[369]"></a>GetPluPrint</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, depart.o(i.GetPluPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[18a]"></a>GetPoRaOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pora.o(i.GetPoRaOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
</UL>

<P><STRONG><a name="[36a]"></a>GetPortRate</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, progopt.o(i.GetPortRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetPortRate &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[36b]"></a>GetReceiptNumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fiscal.o(i.GetReceiptNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetReceiptNumber &rArr; HEXtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[441]"></a>GetRecordSize</STRONG> (Thumb, 1280 bytes, Stack size 28 bytes, memory.o(i.GetRecordSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetRecordSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[36c]"></a>GetReport</STRONG> (Thumb, 1076 bytes, Stack size 24 bytes, report.o(i.GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpReport
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plu_XReport
</UL>

<P><STRONG><a name="[22f]"></a>GetStrFr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, chndisp.o(i.GetStrFr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStrFr
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[30e]"></a>GetStrFrKBD</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, extmodules.o(i.GetStrFrKBD))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GetStrFrKBD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[373]"></a>GetString</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, program.o(i.GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysMes
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlipHead
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgReport
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
</UL>

<P><STRONG><a name="[2f8]"></a>GetStringCHN</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, chninput.o(i.GetStringCHN))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = GetStringCHN &rArr; LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[251]"></a>GetSystemReport</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, report.o(i.GetSystemReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = GetSystemReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpReport
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[376]"></a>GetTaskFromPool</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, print_main.o(i.GetTaskFromPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFontOffset_char
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeGRBToMyself
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[18f]"></a>GetTaxOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tax.o(i.GetTaxOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxTotal
</UL>

<P><STRONG><a name="[191]"></a>GetTenderOffSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tender.o(i.GetTenderOffSet))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
</UL>

<P><STRONG><a name="[180]"></a>GetTimeDate</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, extmodules.o(i.GetTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[469]"></a>GetTimeZones</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, timer.o(i.GetTimeZones))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
</UL>

<P><STRONG><a name="[1c4]"></a>GetUSBKey</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.GetUSBKey))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
</UL>

<P><STRONG><a name="[378]"></a>GetWeekDay</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, extmodules.o(i.GetWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetWeekDay &rArr; GetDaysFrom1900 &rArr; DaysAMonth
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
</UL>

<P><STRONG><a name="[203]"></a>GetWordEntry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, general.o(i.GetWordEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetWordEntry &rArr; CompareBCD &rArr; BCDValue_MUL_10
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionEntry
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[356]"></a>GetWordValue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, program.o(i.GetWordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WidthofWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPromotion
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
</UL>

<P><STRONG><a name="[2f9]"></a>Get_ETHERNET_Ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_app.o(i.Get_ETHERNET_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>Get_Printer_status</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, print_main.o(i.Get_Printer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_Printer_status &rArr; PrinterDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TESTPAPER
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_printer_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
</UL>

<P><STRONG><a name="[1fd]"></a>Getch</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, keyboard.o(i.Getch))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
</UL>

<P><STRONG><a name="[21d]"></a>GotoXY</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chndisp.o(i.GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>

<P><STRONG><a name="[4fa]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[525]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4fb]"></a>HCD_GetURB_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[50c]"></a>HCD_GetXferCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetXferCnt))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
</UL>

<P><STRONG><a name="[37a]"></a>HCD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[50b]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[381]"></a>HCD_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[383]"></a>HCD_SubmitRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[1e2]"></a>HEXtoASC</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, extmodules.o(i.HEXtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTime
</UL>

<P><STRONG><a name="[2bb]"></a>HEXtoASCX0</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, extmodules.o(i.HEXtoASCX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HEXtoASCX0
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
</UL>

<P><STRONG><a name="[385]"></a>HW_GPIOInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, interface.o(i.HW_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[2f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>HardTest</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, hardtest.o(i.HardTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = HardTest &rArr; TestRomRam &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrnPower
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenDrawer
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[35f]"></a>IPToNum</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, program.o(i.IPToNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IPToNum
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
</UL>

<P><STRONG><a name="[3c4]"></a>IncRecIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.IncRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[3a9]"></a>InitAgree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initappl.o(i.InitAgree))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[394]"></a>InitApplication</STRONG> (Thumb, 2556 bytes, Stack size 32 bytes, initappl.o(i.InitApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = InitApplication &rArr; PrintVersion &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanKeyboard
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_Move
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetInvAttr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearInvAttr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitECRVIP
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearVirtualInput
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSalPer
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGraph
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAgree
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearApplMemory
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallECRVIP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a4]"></a>InitClerk</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, initappl.o(i.InitClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitClerk &rArr; WriteClerk &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[39f]"></a>InitCorrec</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitCorrec &rArr; WriteCorrec &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a0]"></a>InitCurr</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, initappl.o(i.InitCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitCurr &rArr; WriteCurr &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[39d]"></a>InitDept</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, initappl.o(i.InitDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitDept &rArr; WriteDept &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[3a1]"></a>InitDisc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, initappl.o(i.InitDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitDisc &rArr; WriteDisc &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[39b]"></a>InitDrawer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, initappl.o(i.InitDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitDrawer &rArr; WriteDrawer &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[2e3]"></a>InitECRVIP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iccard.o(i.InitECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitECRVIP
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[3aa]"></a>InitGraph</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, initappl.o(i.InitGraph))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[39e]"></a>InitGroup</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, initappl.o(i.InitGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitGroup &rArr; WriteGroup &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3ab]"></a>InitKeyMacro</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, initappl.o(i.InitKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitKeyMacro &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a6]"></a>InitModifier</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, initappl.o(i.InitModifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitModifier &rArr; WriteModi &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[5ca]"></a>InitMonitor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, monitor.o(i.InitMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a7]"></a>InitOFFPrice</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, initappl.o(i.InitOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitOFFPrice &rArr; WriteOFFPrice &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a3]"></a>InitPbF</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, initappl.o(i.InitPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitPbF &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[39c]"></a>InitPlu</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, initappl.o(i.InitPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitPlu &rArr; WritePlu &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
</UL>

<P><STRONG><a name="[39a]"></a>InitPoRa</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, initappl.o(i.InitPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitPoRa &rArr; WritePoRa &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a8]"></a>InitPort</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, initappl.o(i.InitPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = InitPort &rArr; WritePort &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3a5]"></a>InitSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initappl.o(i.InitSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[347]"></a>InitSysFlag</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, program.o(i.InitSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = InitSysFlag &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[3a2]"></a>InitTax</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, initappl.o(i.InitTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitTax &rArr; WriteTax &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[399]"></a>InitTender</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, initappl.o(i.InitTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitTender &rArr; WriteTender &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[34a]"></a>Init_Flow</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, flowbill.o(i.Init_Flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Flow &rArr; bFlashMBlockErase &rArr; spi_bFlashMBlockErase &rArr; sf_EraseBlock &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
</UL>

<P><STRONG><a name="[398]"></a>Initial_DateTime</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, initappl.o(i.Initial_DateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Initial_DateTime &rArr; DateTimeToStr &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStr_Right
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[cf]"></a>Inport_CLERK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_CLERK))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Inport_COMM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_COMM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>Inport_DEPT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_DEPT))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Inport_DISC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_DISC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Inport_GRAPPRN</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_GRAPPRN))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>Inport_GROUP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_GROUP))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Inport_HEADER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_HEADER))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>Inport_ICBLOCK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_ICBLOCK))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>Inport_ICCARD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_ICCARD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>Inport_KEYBOARD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_KEYBOARD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>Inport_MODI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_MODI))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>Inport_OFF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_OFF))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Inport_PBFUNC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_PBFUNC))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>Inport_PBTOTAL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_PBTOTAL))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>Inport_PLU</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_PLU))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>Inport_PORA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_PORA))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>Inport_PROM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_PROM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>Inport_SLIPHEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_SLIPHEAD))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Inport_SYSTEM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_SYSTEM))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Inport_TAX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_TAX))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>Inport_TRAILER</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_TRAILER))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>Inport_ZONE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.Inport_ZONE))
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>InputEXASCII</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, chninput.o(i.InputEXASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InputEXASCII &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumric
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
</UL>

<P><STRONG><a name="[3b4]"></a>InputWord</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, extmodules.o(i.InputWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = InputWord &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[341]"></a>InputYesNo</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, extmodules.o(i.InputYesNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = InputYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[366]"></a>InvertBit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, progopt.o(i.InvertBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InvertBit &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[3b5]"></a>IssueKp</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, kp.o(i.IssueKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = IssueKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitOnLine
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
</UL>

<P><STRONG><a name="[22c]"></a>JFeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, extmodules.o(i.JFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = JFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[1fc]"></a>KbHit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.KbHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectCSV_BIN
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
</UL>

<P><STRONG><a name="[3ba]"></a>KeyBoardDeInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, keyboard.o(i.KeyBoardDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[3b9]"></a>KeyBoardInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, keyboard.o(i.KeyBoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = KeyBoardInit &rArr; EXTILine_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardDeInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[1bf]"></a>KeyInput</STRONG> (Thumb, 808 bytes, Stack size 16 bytes, main.o(i.KeyInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4440<LI>Call Chain = KeyInput &rArr; CheckFirmKey &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputByListItems
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3bc]"></a>KpEnd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, kp.o(i.KpEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
</UL>

<P><STRONG><a name="[3be]"></a>KpHeader</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, kp.o(i.KpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = KpHeader &rArr; PrintPbKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[46c]"></a>LeftShiftBCD</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, extmodules.o(i.LeftShiftBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LeftShiftBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
</UL>

<P><STRONG><a name="[19d]"></a>LineEditor</STRONG> (Thumb, 2228 bytes, Stack size 112 bytes, chninput.o(i.LineEditor))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LineEditor &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestHZRight
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[13a]"></a>ListICBlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iccardblock.o(i.ListICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ListICBlock &rArr; ReadICBlock &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASCL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>ListItems</STRONG> (Thumb, 2350 bytes, Stack size 96 bytes, menu.o(i.ListItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592 + In Cycle
<LI>Call Chain = ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetInvAttr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearInvAttr
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArea
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosOfFuncKey
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputYesNo
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTrailer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteSlipHead
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteHeader
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputWord
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputStr
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncRecIndex
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecRecIndex
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[312]"></a>LoadReceipLog</STRONG> (Thumb, 786 bytes, Stack size 56 bytes, flowbill.o(i.LoadReceipLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = LoadReceipLog &rArr; DispRefreshIC &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Long
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEcrNum
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul100
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
</UL>

<P><STRONG><a name="[325]"></a>LookPlu</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, plu.o(i.LookPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LookPlu &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[3c7]"></a>LwIP_DHCP_Process_Handle</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, netconf.o(i.LwIP_DHCP_Process_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = LwIP_DHCP_Process_Handle &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[2fc]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = LwIP_Periodic_Handle &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>MGFunctions</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, extmodules.o(i.MGFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = MGFunctions &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearVirtualInput
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[3d3]"></a>MakeTime</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, report2.o(i.MakeTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MakeTime &rArr; HEXtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[30]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>MenuMain</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, menu.o(i.MenuMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MenuMain &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirmkeyID
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[3d4]"></a>Move_Motor</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, print_main.o(i.Move_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Move_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[1e9]"></a>Multiply</STRONG> (Thumb, 612 bytes, Stack size 88 bytes, extmodules.o(i.Multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Multiply &rArr; Correct_BCDValue1 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[2e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[307]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmInit
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[306]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3d6]"></a>NVIC_SDConfiguration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdio_sd.o(i.NVIC_SDConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SDConfiguration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[144]"></a>NewProgSysFlag</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, program.o(i.NewProgSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = NewProgSysFlag &rArr; InputWord &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputWord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[31f]"></a>NewReceipt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fixed.o(i.NewReceipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = NewReceipt &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[346]"></a>NewTimeDate</STRONG> (Thumb, 798 bytes, Stack size 16 bytes, timer.o(i.NewTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimeDate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaysAMonth
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD4toWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
</UL>

<P><STRONG><a name="[360]"></a>NumToIP</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, program.o(i.NumToIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NumToIP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
</UL>

<P><STRONG><a name="[7a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f2]"></a>OpenDrawer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drawer.o(i.OpenDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenDrawer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawerOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOpenDrawer
</UL>

<P><STRONG><a name="[250]"></a>OpenMess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chndisp.o(i.OpenMess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OpenMess &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetState
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>OutPrint</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(i.OutPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePrintStr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JFeed
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
</UL>

<P><STRONG><a name="[3dc]"></a>OutPrintEx</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.OutPrintEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaveStr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrinter
</UL>

<P><STRONG><a name="[3de]"></a>POWER_KeyINPUT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, keyboard.o(i.POWER_KeyINPUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_KeyINPUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[3df]"></a>PRNDataPort_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, print_main.o(i.PRNDataPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PRNDataPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[493]"></a>PRNFeedPort_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print_main.o(i.PRNFeedPort_Init))
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[3e0]"></a>PRNPePwPort_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, print_main.o(i.PRNPePwPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PRNPePwPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[3e1]"></a>PRNTIMER_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, print_main.o(i.PRNTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PRNTIMER_Init &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[3e9]"></a>PRNTempPort_Init</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, print_main.o(i.PRNTempPort_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
</UL>

<P><STRONG><a name="[1a7]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
</UL>

<P><STRONG><a name="[1a8]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(i.PWR_BackupRegulatorCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
</UL>

<P><STRONG><a name="[1a9]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
</UL>

<P><STRONG><a name="[26c]"></a>PaidOutRa</STRONG> (Thumb, 832 bytes, Stack size 8 bytes, pora.o(i.PaidOutRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = PaidOutRa &rArr; ProcessBuffer &rArr; ProBuf &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[3ec]"></a>PbBuffer</STRONG> (Thumb, 682 bytes, Stack size 16 bytes, pbbuffer.o(i.PbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PbBuffer &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[3ee]"></a>PbFunction</STRONG> (Thumb, 4896 bytes, Stack size 24 bytes, pb.o(i.PbFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = PbFunction &rArr; ProcessBuffer &rArr; ProBuf &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[234]"></a>PbTotal</STRONG> (Thumb, 594 bytes, Stack size 24 bytes, pb.o(i.PbTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbtOffSet
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPb
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbInfo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPBTable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[35]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24c]"></a>PeriodSkip</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, report.o(i.PeriodSkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PeriodSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[204]"></a>Plu_XReport</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, report.o(i.Plu_XReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = Plu_XReport &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[3f4]"></a>PointsByECRVIP</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, iccard.o(i.PointsByECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PointsByECRVIP &rArr; Divide &rArr; CompareBCDValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[3c5]"></a>PosOfFuncKey</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, extmodules.o(i.PosOfFuncKey))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[236]"></a>PrePrintHead</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, print.o(i.PrePrintHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrePrintHead &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[3f6]"></a>PrintAllons</STRONG> (Thumb, 1796 bytes, Stack size 40 bytes, print.o(i.PrintAllons))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintAllons &rArr; PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
</UL>

<P><STRONG><a name="[1f0]"></a>PrintAmt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i.PrintAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[3f9]"></a>PrintArticle</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, kp.o(i.PrintArticle))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = PrintArticle &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[390]"></a>PrintConfInf</STRONG> (Thumb, 1194 bytes, Stack size 40 bytes, hardtest.o(i.PrintConfInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PrintConfInf &rArr; FormPrtConfInf &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeCodeProto
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3fb]"></a>PrintCorrec</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, report.o(i.PrintCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PrintCorrec &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[3fc]"></a>PrintCorrecReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintCorrecReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintCorrecReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[3fe]"></a>PrintCurrReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintCurrReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintCurrReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[3ff]"></a>PrintCurrency</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintCurrency))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintCurrency &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[400]"></a>PrintDept</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, report.o(i.PrintDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PrintDept &rArr; SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[402]"></a>PrintDeptReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDeptReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintDeptReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[213]"></a>PrintDept_PLU</STRONG> (Thumb, 850 bytes, Stack size 16 bytes, plu.o(i.PrintDept_PLU))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PrintDept_PLU &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[403]"></a>PrintDisc</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, report.o(i.PrintDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintDisc &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[404]"></a>PrintDiscReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDiscReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintDiscReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[405]"></a>PrintDrawReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintDrawReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintDrawReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[406]"></a>PrintDrawer</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintDrawer &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[2e1]"></a>PrintECRVIP</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, iccard.o(i.PrintECRVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = PrintECRVIP &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeDateToStr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2ae]"></a>PrintFlowQtyAmt</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, flowbill.o(i.PrintFlowQtyAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = PrintFlowQtyAmt &rArr; DispDateRecNo &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDWidth
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispVoid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotals
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDisc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotalDirDisc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPoRa
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPercentDisc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbClose
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispEnd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDirectDisc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
</UL>

<P><STRONG><a name="[218]"></a>PrintGraphics</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, extmodules.o(i.PrintGraphics))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintGraphics &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[408]"></a>PrintGroup</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintGroup &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[409]"></a>PrintGroupReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintGroupReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintGroupReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[36d]"></a>PrintHead1</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, print.o(i.PrintHead1))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintHead1 &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[2e0]"></a>PrintICMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iccard.o(i.PrintICMessage))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e2]"></a>PrintKeyboard</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, extmodules.o(i.PrintKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = PrintKeyboard &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[23a]"></a>PrintKp</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, kp.o(i.PrintKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChar
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[2a6]"></a>PrintLine</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, print.o(i.PrintLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[3fa]"></a>PrintLine2</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hardtest.o(i.PrintLine2))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintLine2 &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[216]"></a>PrintMGMenu</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, menu.o(i.PrintMGMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PrintMGMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[320]"></a>PrintMessage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, general.o(i.PrintMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintMessage &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[40b]"></a>PrintModifiers</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, depart.o(i.PrintModifiers))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintModifiers &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
</UL>

<P><STRONG><a name="[3f2]"></a>PrintNewBal</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pb.o(i.PrintNewBal))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintNewBal &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[323]"></a>PrintNumber</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fixed.o(i.PrintNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintNumber &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[40c]"></a>PrintOpenPb</STRONG> (Thumb, 796 bytes, Stack size 16 bytes, report.o(i.PrintOpenPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PrintOpenPb &rArr; PrintReportHeader &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[40f]"></a>PrintPb</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, report.o(i.PrintPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintPb &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[410]"></a>PrintPbF</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, report.o(i.PrintPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintPbF &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[411]"></a>PrintPbFReport</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(i.PrintPbFReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintPbFReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[3f0]"></a>PrintPbHeader</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, pb.o(i.PrintPbHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintPbHeader &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[412]"></a>PrintPbItem</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, pbbuffer.o(i.PrintPbItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = PrintPbItem &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
</UL>

<P><STRONG><a name="[3bd]"></a>PrintPbKp</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, kp.o(i.PrintPbKp))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintPbKp &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[413]"></a>PrintPbTrailer</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, general.o(i.PrintPbTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PrintPbTrailer &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
</UL>

<P><STRONG><a name="[414]"></a>PrintPbtReport</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, report.o(i.PrintPbtReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintPbtReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[415]"></a>PrintPlu</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, report.o(i.PrintPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = PrintPlu &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[416]"></a>PrintPluReport</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, report.o(i.PrintPluReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintPluReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[417]"></a>PrintPoRa</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintPoRa &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[418]"></a>PrintPoRaReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintPoRaReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintPoRaReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[372]"></a>PrintPointReport</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, report.o(i.PrintPointReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = PrintPointReport &rArr; PrintTendReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTendReport
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTaxReport
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRaReport
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPluReport
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbtReport
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbFReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroupReport
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawReport
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDiscReport
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeptReport
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrReport
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrecReport
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[371]"></a>PrintPointType</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, report2.o(i.PrintPointType))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[243]"></a>PrintQty</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i.PrintQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[3f8]"></a>PrintQtyAmt</STRONG> (Thumb, 1640 bytes, Stack size 48 bytes, print.o(i.PrintQtyAmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatStrQtyPriAmt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDWidth
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
</UL>

<P><STRONG><a name="[2a8]"></a>PrintRJ</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, print.o(i.PrintRJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakKey
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFlowQtyAmt
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[40e]"></a>PrintRange</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, report.o(i.PrintRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintRange &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[3f7]"></a>PrintRegiInfo</STRONG> (Thumb, 922 bytes, Stack size 32 bytes, print.o(i.PrintRegiInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PrintRegiInfo &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState12
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncordDate
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[3fd]"></a>PrintReport</STRONG> (Thumb, 1662 bytes, Stack size 40 bytes, report.o(i.PrintReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReport
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodSkip
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreak
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTendReport
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTaxReport
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRaReport
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPluReport
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbtReport
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbFReport
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroupReport
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawReport
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDiscReport
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeptReport
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrReport
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrecReport
</UL>

<P><STRONG><a name="[374]"></a>PrintReportHeader</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, report2.o(i.PrintReportHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PrintReportHeader &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[375]"></a>PrintReportType</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, report.o(i.PrintReportType))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PrintReportType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[3f3]"></a>PrintSaleQty</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, general.o(i.PrintSaleQty))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintSaleQty &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[2b6]"></a>PrintSaveStr</STRONG> (Thumb, 254 bytes, Stack size 168 bytes, print.o(i.PrintSaveStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintSaveStr &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRECEIPT
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[214]"></a>PrintSetupMenu</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, firmkey.o(i.PrintSetupMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PrintSetupMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[41e]"></a>PrintSlip</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, print.o(i.PrintSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrintSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckChar
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[41b]"></a>PrintSlipPage</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, print.o(i.PrintSlipPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PrintSlipPage &rArr; SlipMargin &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>

<P><STRONG><a name="[239]"></a>PrintStr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, print.o(i.PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportType
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPb
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReportHeader
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>

<P><STRONG><a name="[1b0]"></a>PrintStr_Center</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, extmodules.o(i.PrintStr_Center))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMGMenu
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[421]"></a>PrintTax</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, report.o(i.PrintTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintTax &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[41a]"></a>PrintTaxReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintTaxReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintTaxReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[419]"></a>PrintTendReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, report.o(i.PrintTendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintTendReport &rArr; PrintReport &rArr; PrintPointType &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointReport
</UL>

<P><STRONG><a name="[420]"></a>PrintTender</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, report.o(i.PrintTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = PrintTender &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[422]"></a>PrintTotal</STRONG> (Thumb, 1582 bytes, Stack size 8 bytes, general.o(i.PrintTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PrintTotal &rArr; PrintQty &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[38f]"></a>PrintVersion</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, hardtest.o(i.PrintVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = PrintVersion &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
</UL>

<P><STRONG><a name="[215]"></a>PrintXZMenu</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, menu.o(i.PrintXZMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = PrintXZMenu &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncRecIndex
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[a7]"></a>Print_Download_Image</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, print_main.o(i.Print_Download_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Print_Download_Image &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[424]"></a>Print_Initial</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, print_main.o(i.Print_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Print_Initial &rArr; SPI_For_Printer &rArr; PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintDensity
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_For_Printer
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_printer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[379]"></a>PrinterDetect</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, print_main.o(i.PrinterDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PrinterDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrnTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
</UL>

<P><STRONG><a name="[428]"></a>PrnTemperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, print_main.o(i.PrnTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_CalcHotTime
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterDetect
</UL>

<P><STRONG><a name="[429]"></a>Prn_CalcHotTime</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, print_main.o(i.Prn_CalcHotTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prn_CalcHotTime
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrnTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
</UL>

<P><STRONG><a name="[42a]"></a>Prn_task00_Stop</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, print_main.o(i.Prn_task00_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Prn_task00_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[42c]"></a>Prn_task01_Start</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, print_main.o(i.Prn_task01_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Prn_task01_Start &rArr; GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[42e]"></a>Prn_task02_PrintChar</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, print_main.o(i.Prn_task02_PrintChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Prn_task02_PrintChar &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[42f]"></a>Prn_task03_PrintGraphic</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, print_main.o(i.Prn_task03_PrintGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Prn_task03_PrintGraphic &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[430]"></a>Prn_task04_FeedPaper</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, print_main.o(i.Prn_task04_FeedPaper))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Prn_task04_FeedPaper &rArr; GetTaskFromPool &rArr; CreatGraphicWithText &rArr; Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Group
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create384Dots
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[431]"></a>Prn_task05_FeedHalf</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, print_main.o(i.Prn_task05_FeedHalf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prn_task05_FeedHalf &rArr; Move_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[432]"></a>ProBuf</STRONG> (Thumb, 3072 bytes, Stack size 88 bytes, buffer.o(i.ProBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = ProBuf &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQty
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOnLine
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPoRaTotal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbFTotal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDiscTotal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintLayOut
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
</UL>

<P><STRONG><a name="[321]"></a>ProcessBuffer</STRONG> (Thumb, 1348 bytes, Stack size 32 bytes, buffer.o(i.ProcessBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = ProcessBuffer &rArr; ProBuf &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintLayOut
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[26a]"></a>ProcessDept</STRONG> (Thumb, 3678 bytes, Stack size 72 bytes, depart.o(i.ProcessDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = ProcessDept &rArr; Tender &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCZero
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbBuffer
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSubTotal
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMaxEntry
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>

<P><STRONG><a name="[434]"></a>ProcessDeptRecord</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, buffer.o(i.ProcessDeptRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ProcessDeptRecord &rArr; CheckMixMatch &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multiply
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPluTotal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddGroupTotal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDeptTotal
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[436]"></a>ProcessFuncLook</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fixed.o(i.ProcessFuncLook))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624 + In Cycle
<LI>Call Chain = ProcessFuncLook &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv100
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[438]"></a>ProcessFunctions</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, main.o(i.ProcessFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4624<LI>Call Chain = ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSalPer
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendReceipt
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[1c1]"></a>ProcessKey</STRONG> (Thumb, 1146 bytes, Stack size 8 bytes, main.o(i.ProcessKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632<LI>Call Chain = ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFunctionEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[439]"></a>ProcessKeyMacro</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, fixed.o(i.ProcessKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = ProcessKeyMacro &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePoint
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestChangePointMust
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[43b]"></a>ProcessOnePlu</STRONG> (Thumb, 874 bytes, Stack size 16 bytes, plu.o(i.ProcessOnePlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4504<LI>Call Chain = ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDaysFrom1900
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordEntry
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
</UL>

<P><STRONG><a name="[3f1]"></a>ProcessPbBuffer</STRONG> (Thumb, 1322 bytes, Stack size 56 bytes, pbbuffer.o(i.ProcessPbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ProcessPbBuffer &rArr; PrintPbItem &rArr; GetPluPrint &rArr; PrintKp &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTaxItem
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[269]"></a>ProcessPlu</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, plu.o(i.ProcessPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4568<LI>Call Chain = ProcessPlu &rArr; ProcessOnePlu &rArr; ProcessDept &rArr; Tender &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[267]"></a>ProcessRecord</STRONG> (Thumb, 6000 bytes, Stack size 72 bytes, computer.o(i.ProcessRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = ProcessRecord &rArr; GetReport &rArr; ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ConfigApplVar
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStartAddress
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSalPer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReceiptNumber
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadBINCLIB
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluNumber
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
</UL>

<P><STRONG><a name="[208]"></a>ProcessXFunc</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, report2.o(i.ProcessXFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4408<LI>Call Chain = ProcessXFunc &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[209]"></a>ProcessZFunc</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, report2.o(i.ProcessZFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = ProcessZFunc &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[2d9]"></a>ProgBalance</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, program.o(i.ProgBalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProgBalance &rArr; ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d8]"></a>ProgBarcodeReader</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, program.o(i.ProgBarcodeReader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ProgBarcodeReader &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c8]"></a>ProgClerk</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, program.o(i.ProgClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgClerk &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c2]"></a>ProgCorrec</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, program.o(i.ProgCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgCorrec &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c4]"></a>ProgCurr</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, program.o(i.ProgCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgCurr &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e7]"></a>ProgDEPTFields</STRONG> (Thumb, 670 bytes, Stack size 16 bytes, program.o(i.ProgDEPTFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgDEPTFields &rArr; WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordSize
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d4]"></a>ProgDate</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, program.o(i.ProgDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ProgDate &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2be]"></a>ProgDept</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, program.o(i.ProgDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ProgDept &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[440]"></a>ProgDevice</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, program.o(i.ProgDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPort
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPortRate
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevicePort
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBarcodeReader
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
</UL>

<P><STRONG><a name="[2c3]"></a>ProgDisc</STRONG> (Thumb, 518 bytes, Stack size 8 bytes, program.o(i.ProgDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgDisc &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c5]"></a>ProgDraw</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, program.o(i.ProgDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgDraw &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e4]"></a>ProgECRVIPPoints</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, iccard.o(i.ProgECRVIPPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ProgECRVIPPoints &rArr; PrintECRVIP &rArr; RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteECRVIPVar
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2de]"></a>ProgExtPrinter</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, program.o(i.ProgExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ProgExtPrinter &rArr; ProgDevice &rArr; GetDevicePort &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2bf]"></a>ProgGroup</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, program.o(i.ProgGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgGroup &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2cb]"></a>ProgHeader</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, program.o(i.ProgHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgHeader &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d7]"></a>ProgHost</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, program.o(i.ProgHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ProgHost &rArr; ProgIP &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIP
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2db]"></a>ProgIC</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, program.o(i.ProgIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ProgIC &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValueToULong
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e5]"></a>ProgIP</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, program.o(i.ProgIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgIP &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHost
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2dd]"></a>ProgKPrn</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, program.o(i.ProgKPrn))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ProgKPrn &rArr; CheckBitValue &rArr; DisplayDecXY &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2bd]"></a>ProgKeyMacro</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, program.o(i.ProgKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632<LI>Call Chain = ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2ca]"></a>ProgModi</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, program.o(i.ProgModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgModi &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e9]"></a>ProgNewVIP</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, program.o(i.ProgNewVIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgNewVIP &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToBCDValue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASCX0
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNewECRVIP
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d6]"></a>ProgOFF</STRONG> (Thumb, 486 bytes, Stack size 8 bytes, program.o(i.ProgOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgOFF &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e6]"></a>ProgPLUFields</STRONG> (Thumb, 822 bytes, Stack size 8 bytes, program.o(i.ProgPLUFields))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ProgPLUFields &rArr; WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordSize
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c6]"></a>ProgPbF</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, program.o(i.ProgPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgPbF &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d2]"></a>ProgPbInfo</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, program.o(i.ProgPbInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgPbInfo &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[199]"></a>ProgPlu</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, program.o(i.ProgPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ProgPlu &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[2c1]"></a>ProgPoRa</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, program.o(i.ProgPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgPoRa &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2e8]"></a>ProgPointType</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, program.o(i.ProgPointType))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = ProgPointType &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2da]"></a>ProgPrnGraph</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, program.o(i.ProgPrnGraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ProgPrnGraph &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2dc]"></a>ProgPromotion</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, program.o(i.ProgPromotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgPromotion &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2ce]"></a>ProgReport</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, program.o(i.ProgReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgReport &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d3]"></a>ProgSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, program.o(i.ProgSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2df]"></a>ProgSlip</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, program.o(i.ProgSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProgSlip &rArr; GetByteValue &rArr; GetWordValue &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteValue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2cd]"></a>ProgSlipHead</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, program.o(i.ProgSlipHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgSlipHead &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d0]"></a>ProgSysFlag</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, program.o(i.ProgSysFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = ProgSysFlag &rArr;  CheckFirmKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysFlag
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2cf]"></a>ProgSysMes</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, program.o(i.ProgSysMes))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgSysMes &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c7]"></a>ProgTax</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, program.o(i.ProgTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgTax &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c0]"></a>ProgTend</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, program.o(i.ProgTend))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgTend &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2d5]"></a>ProgTime</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, program.o(i.ProgTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ProgTime &rArr; CheckTime &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEditPosition
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2cc]"></a>ProgTrailer</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, program.o(i.ProgTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ProgTrailer &rArr; GetString &rArr; ChnInput &rArr; CheckInput &rArr;  ChnInput (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectGraphic
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[2c9]"></a>ProgZone</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, program.o(i.ProgZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ProgZone &rArr; GetOpt &rArr; NewTimeDate &rArr; SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[21e]"></a>ProgramDump</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, progdump.o(i.ProgramDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664<LI>Call Chain = ProgramDump &rArr; DisplayOption &rArr; ProgKeyMacro &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
</UL>

<P><STRONG><a name="[444]"></a>PromotionBeep</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, general.o(i.PromotionBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PromotionBeep &rArr; PutsC1 &rArr; cDispStringXY &rArr; cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
</UL>

<P><STRONG><a name="[445]"></a>PromtionCheck</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, general.o(i.PromtionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PromtionCheck &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatQtyStr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBCDPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
</UL>

<P><STRONG><a name="[27f]"></a>PutsC0</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcd_st7567_cd.o(i.PutsC0))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PutsC0 &rArr; cDispStringXY &rArr; cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDispStringXY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[24a]"></a>PutsC1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcd_st7567_cd.o(i.PutsC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PutsC1 &rArr; cDispStringXY &rArr; cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDispStringXY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
</UL>

<P><STRONG><a name="[164]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>

<P><STRONG><a name="[449]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[314]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IOInit
</UL>

<P><STRONG><a name="[1a6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[165]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
</UL>

<P><STRONG><a name="[46f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
</UL>

<P><STRONG><a name="[49d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[453]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[452]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[455]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[454]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[217]"></a>RFeed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, extmodules.o(i.RFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = RFeed &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutRPaper
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramDump
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrePrintHead
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSetupMenu
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[44a]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
</UL>

<P><STRONG><a name="[448]"></a>RNG_Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interface.o(i.RNG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[1d0]"></a>RSPrint</STRONG> (Thumb, 1052 bytes, Stack size 40 bytes, print_main.o(i.RSPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintGoingOn
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Paper
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutRPaper
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_cut
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partial_cut
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
</UL>

<P><STRONG><a name="[44d]"></a>RTC_AlarmInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, interface.o(i.RTC_AlarmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_AlarmInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
</UL>

<P><STRONG><a name="[60]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; RTC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZReportMust
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45e]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
</UL>

<P><STRONG><a name="[44f]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[451]"></a>RTC_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, interface.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Config &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
</UL>

<P><STRONG><a name="[45a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[45b]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1d5]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[458]"></a>RTC_GetDateTime</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, interface.o(i.RTC_GetDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetDateTime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[44e]"></a>RTC_GetITStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f2xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[459]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
</UL>

<P><STRONG><a name="[45c]"></a>RTC_Initial</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, interface.o(i.RTC_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RTC_Initial &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[45d]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
</UL>

<P><STRONG><a name="[1d7]"></a>RTC_SetDate</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[1d8]"></a>RTC_SetTime</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f2xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>

<P><STRONG><a name="[456]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f2xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[23c]"></a>RWRand</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hardtest.o(i.RWRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWRand &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
</UL>

<P><STRONG><a name="[d1]"></a>ReadClerk</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, clerk.o(i.ReadClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadClerk &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClerkOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOperator
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNew
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPointType
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>ReadComm</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, extmodules.o(i.ReadComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_WaitSendOk
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSReadAString
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStrFrKBD
</UL>

<P><STRONG><a name="[136]"></a>ReadCorrec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, correc.o(i.ReadCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadCorrec &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintCorrec
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCorrec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>ReadCurr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, currency.o(i.ReadCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadCurr &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Currency
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ReadDept</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, depart.o(i.ReadDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDept &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDept
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Dept
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDept
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>ReadDisc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, discount.o(i.ReadDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDisc &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDisc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDisc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>ReadDrawer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drawer.o(i.ReadDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadDrawer &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDrawer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>ReadECRVIPVar</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iccard.o(i.ReadECRVIPVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadECRVIPVar
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
</UL>

<P><STRONG><a name="[143]"></a>ReadFlagsList</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, extmodules.o(i.ReadFlagsList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadFlagsList &rArr; WORDtoASC
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>ReadFrLogRam</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, flowbill.o(i.ReadFrLogRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadFrLogRam &rArr; bFlashReadBuffer &rArr; spi_bFlashReadBuffer &rArr; sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLogFor
</UL>

<P><STRONG><a name="[145]"></a>ReadFromMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(i.ReadFromMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadFromMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>ReadFuncLook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, extmodules.o(i.ReadFuncLook))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadFuncLook &rArr; ECRFuncCodeToName &rArr; ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>ReadGraphic</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, extmodules.o(i.ReadGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadGraphic &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ReadGroup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, group.o(i.ReadGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadGroup &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroup
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGroup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>ReadHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ReadICBlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iccardblock.o(i.ReadICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadICBlock &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICBlockOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListICBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[2f4]"></a>ReadItemCaption</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, menu.o(i.ReadItemCaption))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadItemCaption
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRecIndex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecIndex
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
</UL>

<P><STRONG><a name="[135]"></a>ReadKP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, kp.o(i.ReadKP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKP
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>ReadKeyDesList</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, extmodules.o(i.ReadKeyDesList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKeyDesList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>ReadKeyMacro</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, extmodules.o(i.ReadKeyMacro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKeyMacro
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ReadModi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modifier.o(i.ReadModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadModi &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModiOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintModifiers
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModifier
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>ReadNumric</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, extmodules.o(i.ReadNumric))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadNumric &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ReadOFFPrice</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, offprice.o(i.ReadOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadOFFPrice &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOFFPriceOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>ReadPBTable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pb.o(i.ReadPBTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadPBTable &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>ReadPBTotal</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usbdiskapp.o(i.ReadPBTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPBTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>ReadPbF</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pb.o(i.ReadPbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPbF &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbF
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ReadPlu</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, plu.o(i.ReadPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongToBCDValue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPlu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPlu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Plu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPlu
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPluStock
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>ReadPluStock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, plu.o(i.ReadPluStock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ReadPluStock &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispQtyStr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ReadPoRa</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pora.o(i.ReadPoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPoRa &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PoRa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPoRa
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPoRa
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>ReadPort</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.ReadPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadPort
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>ReadRam</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, interface.o(i.ReadRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTax
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPoRa
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPbF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOFFPrice
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadModi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICBlock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPBTotal
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_Config
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recall_ApplRam
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearch
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
</UL>

<P><STRONG><a name="[3c1]"></a>ReadRecIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.ReadRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[2f0]"></a>ReadRecord</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, computer.o(i.ReadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
</UL>

<P><STRONG><a name="[140]"></a>ReadRepUnit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadRepUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRepUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[350]"></a>ReadSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.ReadSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[13d]"></a>ReadSlipHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadSlipHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadSlipHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ReadTax</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tax.o(i.ReadTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTax &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTAX
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbdiskapp.o(.constdata)
<LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>ReadTender</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tender.o(i.ReadTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTender &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTender
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_Tender
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTender
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>ReadTotal</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, general.o(i.ReadTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadTotal &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTotal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[13c]"></a>ReadTrail</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadTrail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadTrail
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>ReadXZReport</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, extmodules.o(i.ReadXZReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadXZReport
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>ReadZone</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, extmodules.o(i.ReadZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadZone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[33d]"></a>Read_Flow</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, flowbill.o(i.Read_Flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_Flow &rArr; ReadFrLogRam &rArr; bFlashReadBuffer &rArr; spi_bFlashReadBuffer &rArr; sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadReceipLog
</UL>

<P><STRONG><a name="[3ac]"></a>RecallECRVIP</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, iccard.o(i.RecallECRVIP))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[3ae]"></a>RecallFlowHead</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, flowbill.o(i.RecallFlowHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RecallFlowHead &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetInvAttr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearInvAttr
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[393]"></a>RecallScreen</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, chndisp.o(i.RecallScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RecallScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[3af]"></a>Recall_ApplRam</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, initappl.o(i.Recall_ApplRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Recall_ApplRam &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[397]"></a>Recall_Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, initappl.o(i.Recall_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Recall_Config &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[235]"></a>ReceiptIssue</STRONG> (Thumb, 830 bytes, Stack size 24 bytes, print.o(i.ReceiptIssue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFeed
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawerOpen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbTrailer
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutExtPrinter
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSlip
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpEnd
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[467]"></a>Receipt_Data</STRONG> (Thumb, 412 bytes, Stack size 2040 bytes, flowbill.o(i.Receipt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLogBuff
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeDate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
</UL>

<P><STRONG><a name="[324]"></a>RegiEnd</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, general.o(i.RegiEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = RegiEnd &rArr; CalculateTax &rArr; PrintAmt &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[3ef]"></a>RegiInit</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, general.o(i.RegiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = RegiInit &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHead1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZones
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[2a4]"></a>RegiStart</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, general.o(i.RegiStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = RegiStart &rArr; RegiInit &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[41c]"></a>ReleaseSlip</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, print.o(i.ReleaseSlip))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReleaseSlip &rArr; CmdSlip &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
</UL>

<P><STRONG><a name="[370]"></a>ReportEnd</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, report2.o(i.ReportEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = ReportEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQty
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintMessage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[43f]"></a>ReportToUSB</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, usbdiskapp.o(i.ReportToUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = ReportToUSB &rArr; usbGetReport &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ResetFolder
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
</UL>

<P><STRONG><a name="[342]"></a>ResetECRFlow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flowbill.o(i.ResetECRFlow))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
</UL>

<P><STRONG><a name="[41f]"></a>ResetReport</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, report.o(i.ResetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ResetReport &rArr; WriteTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[348]"></a>ResetStartAddress</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, initappl.o(i.ResetStartAddress))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[426]"></a>Reset_printer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print_main.o(i.Reset_printer))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
</UL>

<P><STRONG><a name="[46b]"></a>Restart_Motor</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, print_main.o(i.Restart_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Restart_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>RoundBcd</STRONG> (Thumb, 304 bytes, Stack size 28 bytes, extmodules.o(i.RoundBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RoundBcd &rArr; LeftShiftBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftShiftBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMultiply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOnePlu
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbItem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundTaxable
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
</UL>

<P><STRONG><a name="[1ef]"></a>RoundTaxable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tax.o(i.RoundTaxable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RoundTaxable &rArr; AmtRound &rArr; Add &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBcd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
</UL>

<P><STRONG><a name="[25c]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[487]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[485]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[48a]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[31c]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[46e]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[25f]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[25b]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[486]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[47d]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[260]"></a>SDIO_GetResponse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_sdio.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[68]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[488]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[474]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[31d]"></a>SDIO_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[31b]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[484]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[471]"></a>SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Detect
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[473]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[47b]"></a>SD_GetCardInfo</STRONG> (Thumb, 832 bytes, Stack size 20 bytes, sdio_sd.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[475]"></a>SD_GetState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[477]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[478]"></a>SD_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>

<P><STRONG><a name="[47a]"></a>SD_InitializeCards</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[47e]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, sdio_sd.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[482]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, sdio_sd.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[483]"></a>SD_LowLevel_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SD_LowLevel_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[479]"></a>SD_PowerON</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[29d]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[470]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[489]"></a>SD_ReadBlock</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadBlock &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[48c]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[47c]"></a>SD_SelectDeselect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdio_sd.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[476]"></a>SD_SendStatus</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[48d]"></a>SD_StopTransfer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[48b]"></a>SD_WaitReadOperation</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_WaitReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_WaitReadOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[48e]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, sdio_sd.o(i.SD_WaitWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[48f]"></a>SD_WriteBlock</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteBlock &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[490]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, sdio_sd.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_LowLevel_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[491]"></a>SD_disk_initialize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, diskio.o(i.SD_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[492]"></a>SIM800_PowerOn</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sim800.o(i.SIM800_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SIM800_PowerOn &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5df]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
</UL>

<P><STRONG><a name="[425]"></a>SPI_For_Printer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, print_main.o(i.SPI_For_Printer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPI_For_Printer &rArr; PRNTempPort_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTempPort_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNPePwPort_Init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNFeedPort_Init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNDataPort_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
</UL>

<P><STRONG><a name="[5de]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
</UL>

<P><STRONG><a name="[3ad]"></a>SRAM_Move</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, fsmc_sram.o(i.SRAM_Move))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
</UL>

<P><STRONG><a name="[465]"></a>SRAM_ReadBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsmc_sram.o(i.SRAM_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
</UL>

<P><STRONG><a name="[494]"></a>SRAM_WriteBuffer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fsmc_sram.o(i.SRAM_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ApplRam
</UL>

<P><STRONG><a name="[495]"></a>ST7565R_IO_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd_st7567_od.o(i.ST7565R_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ST7565R_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
</UL>

<P><STRONG><a name="[497]"></a>ST7565R_NOP</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.ST7565R_NOP))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cInitialLCD
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>

<P><STRONG><a name="[496]"></a>ST7565R_SendData</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.ST7565R_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA_C
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD_C
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>

<P><STRONG><a name="[498]"></a>ST7565R_WR_CMD</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.ST7565R_WR_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
</UL>

<P><STRONG><a name="[499]"></a>ST7565R_WR_CMD_C</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_cd.o(i.ST7565R_WR_CMD_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY_C
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSetContrast
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cInitialLCD
</UL>

<P><STRONG><a name="[49a]"></a>ST7565R_WR_DATA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.ST7565R_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_DATA &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>

<P><STRONG><a name="[49b]"></a>ST7565R_WR_DATA_C</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_cd.o(i.ST7565R_WR_DATA_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7565R_WR_DATA_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDrawChar
</UL>

<P><STRONG><a name="[49c]"></a>STM32_Initial</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, interface.o(i.STM32_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = STM32_Initial &rArr; RTC_Initial &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SDConfiguration
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Config
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIOInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPSRAM_Init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[466]"></a>SUB_SCANFP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flowbill.o(i.SUB_SCANFP))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
</UL>

<P><STRONG><a name="[33]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[304]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f2xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine_Init
</UL>

<P><STRONG><a name="[3db]"></a>SavePrintStr</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, print.o(i.SavePrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SavePrintStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
</UL>

<P><STRONG><a name="[2fe]"></a>Save_ApplRam</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, initappl.o(i.Save_ApplRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Save_ApplRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>Save_Config</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, initappl.o(i.Save_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Save_Config &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[43c]"></a>Save_ConfigApplVar</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, initappl.o(i.Save_ConfigApplVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Save_ConfigApplVar &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[21b]"></a>ScreenFeed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, chndisp.o(i.ScreenFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ScreenFeed &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawer
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringCHN
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispLFStr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVersion
</UL>

<P><STRONG><a name="[21c]"></a>ScrollScreen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chndisp.o(i.ScrollScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChar
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[278]"></a>SelectCSV_BIN</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usbdiskapp.o(i.SelectCSV_BIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SelectCSV_BIN &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
</UL>

<P><STRONG><a name="[3b0]"></a>SelectClerk</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, clerk.o(i.SelectClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SelectClerk &rArr; CheckPWD &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoBCD
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[442]"></a>SelectGraphic</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, program.o(i.SelectGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SelectGraphic
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTrailer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgHeader
</UL>

<P><STRONG><a name="[443]"></a>SelectKeyCode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, extmodules.o(i.SelectKeyCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616<LI>Call Chain = SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActiveItemStr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
</UL>

<P><STRONG><a name="[43a]"></a>SelectSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.SelectSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[1bb]"></a>SendComm</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, extmodules.o(i.SendComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceCMD
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendExtPrinter
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlipMargin
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlip
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSlip
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedSlip
</UL>

<P><STRONG><a name="[40d]"></a>SendComp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, computer.o(i.SendComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendComp &rArr; SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[3dd]"></a>SendExtPrinter</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, kp.o(i.SendExtPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendExtPrinter &rArr; CmdExtPrinter &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdExtPrinter
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
</UL>

<P><STRONG><a name="[43e]"></a>SendMultiLog</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, flowbill.o(i.SendMultiLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SendMultiLog &rArr; CheckError &rArr; mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULongtoASC
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
</UL>

<P><STRONG><a name="[401]"></a>SendRecord</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, computer.o(i.SendRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SendRecord &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendString
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPlu
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept
</UL>

<P><STRONG><a name="[4a5]"></a>SendString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, computer.o(i.SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendString &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRecord
</UL>

<P><STRONG><a name="[4a6]"></a>Send_Byte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, print_main.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Hot_Data
</UL>

<P><STRONG><a name="[446]"></a>SetBCDPoint</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, extmodules.o(i.SetBCDPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetBCDPoint &rArr; BcdDiv10 &rArr; BCDValue_DIV_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDiv10
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdMul10
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
</UL>

<P><STRONG><a name="[30c]"></a>SetComm</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, extmodules.o(i.SetComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePort
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchange2Port
</UL>

<P><STRONG><a name="[1f9]"></a>SetEditPosition</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, chninput.o(i.SetEditPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetEditPosition &rArr; GotoXY &rArr; mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTime
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSlip
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPointType
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKPrn
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgExtPrinter
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgBalance
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBitValue
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIP
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
</UL>

<P><STRONG><a name="[270]"></a>SetFontOffset_char</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, print_main.o(i.SetFontOffset_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFontOffset_char
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[2bc]"></a>SetKeyboard</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, extmodules.o(i.SetKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632<LI>Call Chain = SetKeyboard &rArr; SelectKeyCode &rArr; ListItems &rArr;  BarCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeptPluKeysCount
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectKeyCode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
</UL>

<P><STRONG><a name="[212]"></a>SetPassword</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, extmodules.o(i.SetPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SetPassword &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessXFunc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
</UL>

<P><STRONG><a name="[427]"></a>SetPrintDensity</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, print_main.o(i.SetPrintDensity))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
</UL>

<P><STRONG><a name="[433]"></a>SetPrintLayOut</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, buffer.o(i.SetPrintLayOut))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
</UL>

<P><STRONG><a name="[4c2]"></a>SetRTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interface.o(i.SetRTS))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3c2]"></a>SetRecIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu.o(i.SetRecIndex))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintXZMenu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadItemCaption
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[3b3]"></a>SetTimeDate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, extmodules.o(i.SetTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
</UL>

<P><STRONG><a name="[36e]"></a>SetUpReport</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, report2.o(i.SetUpReport))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemReport
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
</UL>

<P><STRONG><a name="[450]"></a>SetZReportMust</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fiscal.o(i.SetZReportMust))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[4a9]"></a>Set_HotPIN</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, print_main.o(i.Set_HotPIN))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Hot
</UL>

<P><STRONG><a name="[272]"></a>Set_Hot_Data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, print_main.o(i.Set_Hot_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Hot_Data &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[273]"></a>Set_Hot_Group</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, print_main.o(i.Set_Hot_Group))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[42b]"></a>Set_Motor_Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, print_main.o(i.Set_Motor_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend_Motor
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Motor
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task00_Stop
</UL>

<P><STRONG><a name="[529]"></a>Set_USBH_HID_CallBacks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_hid_core.o(i.Set_USBH_HID_CallBacks))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
</UL>

<P><STRONG><a name="[528]"></a>Set_USBH_MSC_CallBacks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_msc_core.o(i.Set_USBH_MSC_CallBacks))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
</UL>

<P><STRONG><a name="[41d]"></a>SlipMargin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, print.o(i.SlipMargin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SlipMargin &rArr; SendComm &rArr; Bios_PortWrite &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintQtyAmt
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[274]"></a>Start_Hot</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, print_main.o(i.Start_Hot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Start_Hot &rArr; Prn_CalcHotTime
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HotPIN
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_CalcHotTime
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateGraphicDots
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatGraphicWithText
</UL>

<P><STRONG><a name="[44c]"></a>Start_Motor</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, print_main.o(i.Start_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Start_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drive_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
</UL>

<P><STRONG><a name="[23f]"></a>Start_When_Ready</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, print_main.o(i.Start_When_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Start_When_Ready &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Motor
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
</UL>

<P><STRONG><a name="[42d]"></a>Stop_Motor</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, print_main.o(i.Stop_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stop_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
</UL>

<P><STRONG><a name="[22a]"></a>StoreInBuffer</STRONG> (Thumb, 1192 bytes, Stack size 32 bytes, buffer.o(i.StoreInBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StoreInBuffer &rArr; ReadCorrec &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCDValue
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
</UL>

<P><STRONG><a name="[2a5]"></a>StorePbBuffer</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, pbbuffer.o(i.StorePbBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StorePbBuffer &rArr; PbBuffer &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaidOutRa
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Discount
</UL>

<P><STRONG><a name="[36f]"></a>StorePbInvoice</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, pb.o(i.StorePbInvoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = StorePbInvoice &rArr; PrintLine &rArr; PrintStr &rArr; PrintQtyAmt &rArr; PrintRJ &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRam
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReport
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
</UL>

<P><STRONG><a name="[202]"></a>StrToBCDValue</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, extmodules.o(i.StrToBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StrToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTimeDate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInStore
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExploreLog
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputForMenu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEntry
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBCDValue
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHEXValue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHexBytes
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
</UL>

<P><STRONG><a name="[170]"></a>SubBCDValue12</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, extmodules.o(i.SubBCDValue12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubBCDValue12
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Divide
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
</UL>

<P><STRONG><a name="[194]"></a>Subtract</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, extmodules.o(i.Subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Subtract &rArr; SubBCDValue12
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBCDValue12
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correct_BCDValue1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDValue_MUL_10
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBCDValue12
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMixMatch
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProBuf
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTotal
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTax
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[230]"></a>SuspendECR</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, firmkey.o(i.SuspendECR))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SuspendECR &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
</UL>

<P><STRONG><a name="[326]"></a>SuspendReceipt</STRONG> (Thumb, 676 bytes, Stack size 8 bytes, fixed.o(i.SuspendReceipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4584 + In Cycle
<LI>Call Chain = SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
</UL>

<P><STRONG><a name="[4aa]"></a>SuspendScreen</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, chndisp.o(i.SuspendScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SuspendScreen &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
</UL>

<P><STRONG><a name="[4ab]"></a>Suspend_Motor</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, print_main.o(i.Suspend_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Suspend_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>SysTick_Handler</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SystemInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_stm32f2xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>TESTPAPER</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, print_main.o(i.TESTPAPER))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Print
</UL>

<P><STRONG><a name="[53]"></a>TIM2_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, print_main.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM2_IRQHandler &rArr; Wait_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_When_Ready
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Paper
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend_Motor
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Motor
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task05_FeedHalf
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task04_FeedPaper
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task03_PrintGraphic
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task02_PrintChar
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task01_Start
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prn_task00_Stop
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM3_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, print_main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HotPIN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a1]"></a>TIM5_Init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, interface.o(i.TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM5_Init &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[6e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, keyboard.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM7_IRQHandler &rArr; cClearScreen &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_KeyINPUT
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardDeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOff
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3bb]"></a>TIM7_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, interface.o(i.TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardInit
</UL>

<P><STRONG><a name="[3e3]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3e6]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[4ad]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3e8]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3e7]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3e5]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f2xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[3e4]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[4b3]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
</UL>

<P><STRONG><a name="[4af]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SelectOnePulseMode))
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[4b1]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[3e2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRNTIMER_Init
</UL>

<P><STRONG><a name="[435]"></a>Tender</STRONG> (Thumb, 3328 bytes, Stack size 24 bytes, tender.o(i.Tender))
<BR><BR>[Stack]<UL><LI>Max Depth = 4416<LI>Call Chain = Tender &rArr; GPRSSendECR_LOG &rArr; CalculateCrcSum
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDrawerTotal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiStart
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtInputMask
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDrawer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSaleQty
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNumber
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAmt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrency
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmtRound
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTenderTotal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPbtTotal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDrawerTotal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurrTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromtionCheck
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Given
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewReceipt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddReceiptNumber
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewBal
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPb
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFunctions
</UL>

<P><STRONG><a name="[38a]"></a>TestBEEP</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hardtest.o(i.TestBEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestBEEP &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[437]"></a>TestChangePointMust</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, main.o(i.TestChangePointMust))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFuncLook
</UL>

<P><STRONG><a name="[4b5]"></a>TestCom123</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, extmodules.o(i.TestCom123))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TestCom123 &rArr; ReadComm &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComm
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadComm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyComm
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSerial123
</UL>

<P><STRONG><a name="[391]"></a>TestCustomer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hardtest.o(i.TestCustomer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TestCustomer &rArr; PutsC1 &rArr; cDispStringXY &rArr; cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[389]"></a>TestDateTime</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hardtest.o(i.TestDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TestDateTime &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateTimeToStr
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRtc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[387]"></a>TestDisplay</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hardtest.o(i.TestDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestDisplay &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[3bf]"></a>TestHZRight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chndisp.o(i.TestHZRight))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
</UL>

<P><STRONG><a name="[38c]"></a>TestKeyboard</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hardtest.o(i.TestKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TestKeyboard &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASC
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[4b8]"></a>TestLMM</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, interface.o(i.TestLMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestLMM
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[38b]"></a>TestOpenDrawer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardtest.o(i.TestOpenDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOpenDrawer &rArr; OpenDrawer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenDrawer
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[44b]"></a>TestPrintGoingOn</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, print_main.o(i.TestPrintGoingOn))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[386]"></a>TestPrinter</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, hardtest.o(i.TestPrinter))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TestPrinter &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrintEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[38d]"></a>TestPrnPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardtest.o(i.TestPrnPower))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[4b7]"></a>TestRam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interface.o(i.TestRam))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[388]"></a>TestRomRam</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, hardtest.o(i.TestRomRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TestRomRam &rArr; PrintStr_Center &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRam
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLMM
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPrintGoingOn
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr_Center
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoASC
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[4b6]"></a>TestRtc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, extmodules.o(i.TestRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TestRtc &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDateTime
</UL>

<P><STRONG><a name="[134]"></a>TestSendMess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gprs.o(i.TestSendMess))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[38e]"></a>TestSerial123</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, hardtest.o(i.TestSerial123))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TestSerial123 &rArr; OutPrint &rArr; OutPrintEx &rArr; Bios &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCom123
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
</UL>

<P><STRONG><a name="[4b2]"></a>Time_Update</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet_app.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>TransactionVoid</STRONG> (Thumb, 802 bytes, Stack size 24 bytes, correc.o(i.TransactionVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = TransactionVoid &rArr; ProcessBuffer &rArr; ProBuf &rArr; KpEnd &rArr; ReceiptIssue &rArr; Receipt_Data &rArr; CheckLogBuff &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintLine
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatAmtStr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispAmtStr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFlashChar
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSubDisc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_Data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenFeed
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegiEnd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRJ
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlip
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateTax
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCorrecTotal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreInBuffer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
</UL>

<P><STRONG><a name="[1db]"></a>UARTGet</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usart.o(i.UARTGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar_nb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_underline_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sel_raster_bit_image
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Download_Image
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_GS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_ESC
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Download_Image
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_Paper
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComm
</UL>

<P><STRONG><a name="[49e]"></a>UARTInit</STRONG> (Thumb, 652 bytes, Stack size 56 bytes, usart.o(i.UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
</UL>

<P><STRONG><a name="[1dd]"></a>UARTSend</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(i.UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortWrite
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_status
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_printer_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_DLE
</UL>

<P><STRONG><a name="[8e]"></a>UART_GetChar_nb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.UART_GetChar_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_GetChar_nb &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[90]"></a>UART_PutChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart.o(i.UART_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
</UL>
<BR>[Address Reference Count : 2]<UL><LI> monitor.o(i.xputs)
<LI> monitor.o(i.InitMonitor)
</UL>
<P><STRONG><a name="[4bf]"></a>UART_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.UART_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_PutString &rArr; UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>

<P><STRONG><a name="[2b4]"></a>ULong64toASC</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, extmodules.o(i.ULong64toASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ULong64toASC &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNonAdd
</UL>

<P><STRONG><a name="[328]"></a>ULongToBCDValue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, extmodules.o(i.ULongToBCDValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULongToBCDValue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDept_PLU
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintConfInf
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormPrtConfInf
</UL>

<P><STRONG><a name="[4a4]"></a>ULongtoASC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, extmodules.o(i.ULongtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULongtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMultiLog
</UL>

<P><STRONG><a name="[2b7]"></a>ULongtoASCL</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, extmodules.o(i.ULongtoASCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ULongtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListICBlock
</UL>

<P><STRONG><a name="[5c]"></a>USART1_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32f2xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART3_IRQHandler</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f2xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USART6_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32f2xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTS
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4bb]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[4be]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[4c0]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4bc]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[4ba]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[4b9]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_OverSampling8Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[4c1]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4bd]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[1d1]"></a>USART_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usart.o(i.USART_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_printf &rArr; UART_PutString &rArr; UART_PutChar &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutString
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_1
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios
</UL>

<P><STRONG><a name="[4da]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[4c7]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[4c8]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[4c6]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4c9]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[4ca]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[4c5]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[3d8]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[4dc]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4d9]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[4dd]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4df]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[4de]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[16]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceConfigured &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceConnected &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceDisconnected &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceReset &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceResumed &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_DeviceSuspended &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_USR_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_USR_Init &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[4e0]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[4e2]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4e3]"></a>USBH_BulkSendData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[4e4]"></a>USBH_ClrFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[a]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[4e6]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[4e5]"></a>USBH_CtlReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[4e8]"></a>USBH_CtlSendData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[4e9]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[527]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4ea]"></a>USBH_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleDisconnect
</UL>

<P><STRONG><a name="[b]"></a>USBH_Disconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[526]"></a>USBH_ErrorHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4eb]"></a>USBH_Free_Channel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[4ec]"></a>USBH_GetDescriptor</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[521]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[4ed]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4ef]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4f3]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[4fe]"></a>USBH_HandleControl</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[504]"></a>USBH_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
</UL>

<P><STRONG><a name="[4f9]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbh_ioreq.o(i.USBH_InterruptReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[509]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[50a]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetXferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>

<P><STRONG><a name="[510]"></a>USBH_MSC_ErrorHandle</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbh_msc_core.o(i.USBH_MSC_ErrorHandle))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[514]"></a>USBH_MSC_HandleBOTXfer</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, usbh_msc_bot.o(i.USBH_MSC_HandleBOTXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[50e]"></a>USBH_MSC_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_msc_bot.o(i.USBH_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[512]"></a>USBH_MSC_ModeSense6</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ModeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ModeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[515]"></a>USBH_MSC_Read10</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.USBH_MSC_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MSC_Read10
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[511]"></a>USBH_MSC_ReadCapacity10</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[513]"></a>USBH_MSC_RequestSense</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_RequestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[50f]"></a>USBH_MSC_TestUnitReady</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_TestUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[516]"></a>USBH_MSC_Write10</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, usbh_msc_scsi.o(i.USBH_MSC_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_Write10
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[500]"></a>USBH_Modify_Channel</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[3d7]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[4fd]"></a>USBH_Open_Channel</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[524]"></a>USBH_Process</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
</UL>

<P><STRONG><a name="[9]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[501]"></a>USBH_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[503]"></a>USBH_SetCfg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[24]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbh_msc_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBH_MSC_CallBacks
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBH_HID_CallBacks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBH_USR_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_DeviceAddressAssigned &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_DeviceAttached &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_msc_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_EnumerationDone &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBH_USR_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_Init &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBH_USR_MSC_Application</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_MSC_Application))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_OverCurrentDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_OverCurrentDetected &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBH_USR_Product_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USBH_USR_Product_String &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_ResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_ResetDevice &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USBH_USR_SerialNum_String &rArr; xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBH_USR_UserInput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USBH_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_usr.o(.data)
</UL>
<P><STRONG><a name="[1c3]"></a>USB_Detect</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_application.o(i.USB_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_Detect &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HandleDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
</UL>

<P><STRONG><a name="[1ab]"></a>USB_DiskReady</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_application.o(i.USB_DiskReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USB_DiskReady &rArr; USB_Detect &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[52a]"></a>USB_HandleDisconnect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_application.o(i.USB_HandleDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HandleDisconnect &rArr; USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
</UL>

<P><STRONG><a name="[506]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_ConfigVBUS &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[52b]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_DriveVBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[507]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[505]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[502]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[52c]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>

<P><STRONG><a name="[37d]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[37f]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[37c]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[530]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[28e]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[288]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[293]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[286]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[284]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[28b]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[289]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[380]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[531]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_EnableHostInt &rArr; USB_OTG_EnableCommonInt
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[52f]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[29b]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[28f]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[534]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[538]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[4fc]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[517]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 568 bytes, Stack size 28 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[384]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 502 bytes, Stack size 60 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[52e]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[4cf]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4f8]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[518]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d0]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[291]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[296]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[297]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[532]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[535]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[299]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[382]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[37b]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[37e]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[29c]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[4a2]"></a>USB_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_application.o(i.USB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB_Start &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[3b8]"></a>USR_KEYBRD_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_msc_usr.o(i.USR_KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USR_KEYBRD_Init &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Init
</UL>

<P><STRONG><a name="[3b7]"></a>USR_KEYBRD_ProcessData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USR_KEYBRD_ProcessData))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Decode
</UL>

<P><STRONG><a name="[3d2]"></a>USR_MOUSE_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USR_MOUSE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Init
</UL>

<P><STRONG><a name="[3d1]"></a>USR_MOUSE_ProcessData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_msc_usr.o(i.USR_MOUSE_ProcessData))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Decode
</UL>

<P><STRONG><a name="[1b5]"></a>U_CloseFile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdiskapp.o(i.U_CloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = U_CloseFile &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[1ae]"></a>U_CreateFile</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbdiskapp.o(i.U_CreateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = U_CreateFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[27a]"></a>U_FileSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdiskapp.o(i.U_FileSize))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
</UL>

<P><STRONG><a name="[27b]"></a>U_LocateFile</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbdiskapp.o(i.U_LocateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = U_LocateFile &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
</UL>

<P><STRONG><a name="[1af]"></a>U_OpenFile</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbdiskapp.o(i.U_OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[1b6]"></a>U_ReadFile</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbdiskapp.o(i.U_ReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = U_ReadFile &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[279]"></a>U_ResetFolder</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdiskapp.o(i.U_ResetFolder))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = U_ResetFolder &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbALLTheFile
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
</UL>

<P><STRONG><a name="[1b4]"></a>U_WriteFile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbdiskapp.o(i.U_WriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTitlel
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportNew
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportDel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbExportALL
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_TAX
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_SubTotalDisc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PercentDisc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbTransTo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbOpen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_FlowQtyAmt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>

<P><STRONG><a name="[91]"></a>UpdateBIOS</STRONG> (Thumb, 2024 bytes, Stack size 0 bytes, ecr_iap.o(i.UpdateBIOS))
<BR>[Address Reference Count : 1]<UL><LI> computer.o(i.ProcessRecord)
</UL>
<P><STRONG><a name="[3ed]"></a>UpdatePbRecord</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, pbbuffer.o(i.UpdatePbRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UpdatePbRecord &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBCD
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
</UL>

<P><STRONG><a name="[32]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c0]"></a>VirtualInputStr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menu.o(i.VirtualInputStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VirtualInputStr
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[3c6]"></a>VirtualInputWord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, menu.o(i.VirtualInputWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VirtualInputWord &rArr; WORDtoASCL
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[22d]"></a>WORDtoASC</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, extmodules.o(i.WORDtoASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WORDtoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DowmLoadGRB
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KpHeader
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbTransTo
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPbOpen
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPrnGraph
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlagsList
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintGraphics
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestKeyboard
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvertBit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSlipPage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportEnd
</UL>

<P><STRONG><a name="[201]"></a>WORDtoASCL</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, extmodules.o(i.WORDtoASCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WORDtoASCL
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessBuffer
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgZone
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNumric
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGraphic
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKeyboard
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRFuncCodeToName
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VirtualInputWord
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIndex
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitKeyMacro
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRegiInfo
</UL>

<P><STRONG><a name="[23d]"></a>WORDtoASCZero</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, extmodules.o(i.WORDtoASCZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WORDtoASCZero
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPluFile
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintArticle
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluPrint
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintReport
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintRange
</UL>

<P><STRONG><a name="[363]"></a>WORDtoBCD</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, extmodules.o(i.WORDtoBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WORDtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectClerk
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbKp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintPbHeader
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLinkNumber
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbFunction
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModifier
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[20d]"></a>WaitForYesNo</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, extmodules.o(i.WaitForYesNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = WaitForYesNo &rArr; KbHit &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbHit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CenterForDisplay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPLUFields
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDEPTFields
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessZFunc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MGFunctions
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintAllons
</UL>

<P><STRONG><a name="[3b6]"></a>WaitOnLine</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, extmodules.o(i.WaitOnLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitOnLine &rArr; Bios_PortRead &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_PortRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
</UL>

<P><STRONG><a name="[4ae]"></a>Wait_Paper</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, print_main.o(i.Wait_Paper))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Wait_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2b9]"></a>WidthofWORD</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, extmodules.o(i.WidthofWORD))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordValue
</UL>

<P><STRONG><a name="[d2]"></a>WriteClerk</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, clerk.o(i.WriteClerk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteClerk &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClerkOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgClerk
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitClerk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[34f]"></a>WriteCorrec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, correc.o(i.WriteCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCorrec &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCorrecOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCorrec
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCorrec
</UL>

<P><STRONG><a name="[34e]"></a>WriteCurr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, currency.o(i.WriteCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteCurr &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgCurr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurr
</UL>

<P><STRONG><a name="[ac]"></a>WriteDept</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, depart.o(i.WriteDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDept &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeptOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDept
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>WriteDisc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, discount.o(i.WriteDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDisc &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiscOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDisc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[34d]"></a>WriteDrawer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drawer.o(i.WriteDrawer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDrawer &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDrawerOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDraw
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrawer
</UL>

<P><STRONG><a name="[3f5]"></a>WriteECRVIPVar</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, iccard.o(i.WriteECRVIPVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteECRVIPVar
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsByECRVIP
</UL>

<P><STRONG><a name="[c6]"></a>WriteGroup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, group.o(i.WriteGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteGroup &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGroupOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgKeyMacro
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgGroup
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>WriteICBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iccardblock.o(i.WriteICBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteICBlock &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetICBlockOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>WriteModi</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, modifier.o(i.WriteModi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteModi &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModiOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgModi
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModifier
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>WriteOFFPrice</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, offprice.o(i.WriteOFFPrice))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteOFFPrice &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOFFPriceOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgOFF
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOFFPrice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>WritePBTotal</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdiskapp.o(i.WritePBTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePBTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>WritePbF</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pb.o(i.WritePbF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePbF &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbFOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPbF
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPbF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>WritePlu</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, plu.o(i.WritePlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WritePlu &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPlu
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>WritePluInventory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, plu.o(i.WritePluInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePluInventory &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPluOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllReport
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDeptRecord
</UL>

<P><STRONG><a name="[241]"></a>WritePlu_At</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, plu.o(i.WritePlu_At))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WritePlu_At &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
</UL>

<P><STRONG><a name="[e6]"></a>WritePoRa</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pora.o(i.WritePoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WritePoRa &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPoRaOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgPoRa
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPoRa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>WritePort</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port.o(i.WritePort))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = WritePort &rArr; SetComm &rArr; UARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPort
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[240]"></a>WriteRam</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, interface.o(i.WriteRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Config
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTender
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDrawer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCurr
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCorrec
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_ConfigApplVar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRandomPlu
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePluInventory
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTax
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePoRa
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePbF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOFFPrice
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteModi
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteICBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteGroup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDept
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClerk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePBTotal
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTotal
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlu
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDept
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWRand
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePlu_At
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePbRecord
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbBuffer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPbBuffer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePbInvoice
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPbNumber
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintOpenPb
</UL>

<P><STRONG><a name="[34b]"></a>WriteSalPer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, salper.o(i.WriteSalPer))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[b4]"></a>WriteTax</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tax.o(i.WriteTax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTax &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTax
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTax
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdiskapp.o(.constdata)
</UL>
<P><STRONG><a name="[34c]"></a>WriteTender</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tender.o(i.WriteTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTender &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTenderOffSet
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgTend
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTender
</UL>

<P><STRONG><a name="[468]"></a>WriteToLogRam</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, flowbill.o(i.WriteToLogRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WriteToLogRam &rArr; bFlashProgram &rArr; spi_bFlashProgram &rArr; sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLogFor
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receipt_Data
</UL>

<P><STRONG><a name="[193]"></a>WriteTotal</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, general.o(i.WriteTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRam
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReport
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTotal
</UL>

<P><STRONG><a name="[544]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1a4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDDateTimeToStr
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ResetFolder
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatToCSV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_PbTransTo
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_New
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispRefreshIC
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDateRecNo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeDateToStr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRomRam
</UL>

<P><STRONG><a name="[546]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[620]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[621]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[4c3]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>

<P><STRONG><a name="[622]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[623]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[624]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[625]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[626]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3b2]"></a>bFlashMBlockErase</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flashb.o(i.bFlashMBlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bFlashMBlockErase &rArr; spi_bFlashMBlockErase &rArr; sf_EraseBlock &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashMBlockErase
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
</UL>

<P><STRONG><a name="[543]"></a>bFlashProgram</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, flashb.o(i.bFlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bFlashProgram &rArr; spi_bFlashProgram &rArr; sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteToLogRam
</UL>

<P><STRONG><a name="[461]"></a>bFlashReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flashb.o(i.bFlashReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bFlashReadBuffer &rArr; spi_bFlashReadBuffer &rArr; sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrLogRam
</UL>

<P><STRONG><a name="[249]"></a>cClearScreen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd_st7567_cd.o(i.cClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cClearScreen &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY_C
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA_C
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineEditor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearEntry
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKeyMacro
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
</UL>

<P><STRONG><a name="[553]"></a>cDispCharXY</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lcd_st7567_cd.o(i.cDispCharXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDispStringXY
</UL>

<P><STRONG><a name="[447]"></a>cDispStringXY</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd_st7567_cd.o(i.cDispStringXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cDispStringXY &rArr; cDispCharXY &rArr; cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC1
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutsC0
</UL>

<P><STRONG><a name="[554]"></a>cDrawChar</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcd_st7567_cd.o(i.cDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cDrawChar &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY_C
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA_C
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDispCharXY
</UL>

<P><STRONG><a name="[555]"></a>cInitialLCD</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lcd_st7567_cd.o(i.cInitialLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cInitialLCD &rArr; cSetContrast &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSetContrast
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD_C
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
</UL>

<P><STRONG><a name="[556]"></a>cSetContrast</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_cd.o(i.cSetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cSetContrast &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD_C
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cInitialLCD
</UL>

<P><STRONG><a name="[59d]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[3cf]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[3ce]"></a>dhcp_fine_tmr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[58c]"></a>dhcp_release</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[58d]"></a>dhcp_renew</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[3c8]"></a>dhcp_start</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[3c9]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dhcp_stop &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[55b]"></a>disk_initialize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_initialize &rArr; SD_disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5e2]"></a>disk_ioctl</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[558]"></a>disk_read</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read10
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[55a]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[5a3]"></a>disk_write</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write10
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[583]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[56e]"></a>etharp_query</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[5ab]"></a>etharp_raw</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[5a6]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3cd]"></a>etharp_tmr</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = etharp_tmr &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[3d0]"></a>ethernetif_input</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[53b]"></a>f_chdir</STRONG> (Thumb, 88 bytes, Stack size 192 bytes, ff.o(i.f_chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = f_chdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
</UL>

<P><STRONG><a name="[539]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
</UL>

<P><STRONG><a name="[53f]"></a>f_lseek</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_LocateFile
</UL>

<P><STRONG><a name="[53d]"></a>f_mkdir</STRONG> (Thumb, 368 bytes, Stack size 216 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = f_mkdir &rArr; dir_register_formkdir &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
</UL>

<P><STRONG><a name="[53a]"></a>f_mount</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = f_mount &rArr; clear_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
</UL>

<P><STRONG><a name="[53e]"></a>f_open</STRONG> (Thumb, 412 bytes, Stack size 224 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
</UL>

<P><STRONG><a name="[53c]"></a>f_opendir</STRONG> (Thumb, 116 bytes, Stack size 168 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CreateFile
</UL>

<P><STRONG><a name="[540]"></a>f_read</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ReadFile
</UL>

<P><STRONG><a name="[5b1]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[541]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
</UL>

<P><STRONG><a name="[563]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[55e]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[5a0]"></a>gen_numname</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[560]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[5b4]"></a>get_fattime</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, interface.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fattime &rArr; RTC_GetDateTime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[3ca]"></a>htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inet.o(i.htonl))
<BR><BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[5ac]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inet.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5bc]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[5a4]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[5be]"></a>ip_frag</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[5c1]"></a>ip_output</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[5c3]"></a>ip_output_if</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[5c2]"></a>ip_route</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[4b0]"></a>keydown</STRONG> (Thumb, 598 bytes, Stack size 8 bytes, keyboard.o(i.keydown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = keydown &rArr; keyscan
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[5c6]"></a>keyscan</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, keyboard.o(i.keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = keyscan
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keydown
</UL>

<P><STRONG><a name="[2ed]"></a>mClearInvAttr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.mClearInvAttr))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[197]"></a>mClearScreen</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lcd_st7567_od.o(i.mClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mClearScreen &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tender
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDept
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransactionVoid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Correction
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRecord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupScreen
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_SetSendMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_LOG_All
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDownloadEcrPLUData
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPlu
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECRVIPLogin
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgNewVIP
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgIC
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgECRVIPPoints
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintECRVIP
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMain
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeyboard
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_DateTime
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayECRVIP
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispGrandTotal
</UL>

<P><STRONG><a name="[2ac]"></a>mDispCharXY</STRONG> (Thumb, 226 bytes, Stack size 44 bytes, lcd_st7567_od.o(i.mDispCharXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayChar
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendScreen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
</UL>

<P><STRONG><a name="[2ab]"></a>mDispCursor</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, lcd_st7567_od.o(i.mDispCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mEnCursor
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCharXY
</UL>

<P><STRONG><a name="[200]"></a>mDispStringXY</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lcd_st7567_od.o(i.mDispStringXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[1fe]"></a>mDrawABox</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, lcd_st7567_od.o(i.mDrawABox))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mDrawABox &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mRefreshLine
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForYesNo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPWD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPrompt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPassword
</UL>

<P><STRONG><a name="[5c9]"></a>mDrawChar</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lcd_st7567_od.o(i.mDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCharXY
</UL>

<P><STRONG><a name="[345]"></a>mDrawGPRS</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lcd_st7567_od.o(i.mDrawGPRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mDrawGPRS &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_ProcessRecord
</UL>

<P><STRONG><a name="[392]"></a>mDrawPower</STRONG> (Thumb, 280 bytes, Stack size 28 bytes, lcd_st7567_od.o(i.mDrawPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mDrawPower &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7565SetXY
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardTest
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>mEnCursor</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.mEnCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mEnCursor &rArr; mDispCursor &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoXY
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFirmKey
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_New_PLU
</UL>

<P><STRONG><a name="[4a0]"></a>mInitialLCD</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.mInitialLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mInitialLCD &rArr; cClearScreen &rArr; st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mLightLCDOn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cInitialLCD
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSetContrast
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_NOP
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[248]"></a>mLightLCDOff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.mLightLCDOff))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
</UL>

<P><STRONG><a name="[225]"></a>mLightLCDOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.mLightLCDOn))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKeyboard
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
</UL>

<P><STRONG><a name="[222]"></a>mRefreshLine</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.mRefreshLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispStringXY
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChnInput
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollScreen
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallScreen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLine
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuspendECR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGBuf
</UL>

<P><STRONG><a name="[3b1]"></a>mSetContrast</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_st7567_od.o(i.mSetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mSetContrast &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitialLCD
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgSysFlag
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewProgSysFlag
</UL>

<P><STRONG><a name="[2ec]"></a>mSetInvAttr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.mSetInvAttr))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallFlowHead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySetup
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListItems
</UL>

<P><STRONG><a name="[3da]"></a>mSetState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lcd_st7567_od.o(i.mSetState))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
</UL>

<P><STRONG><a name="[88]"></a>main</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4648<LI>Call Chain = main &rArr; BarCode &rArr; ProcessKey &rArr; ProcessFunctions &rArr; Fixed &rArr; SuspendReceipt &rArr;  ProcessFunctions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrGetStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMonitor
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Initial
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckError
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Computer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMess
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BalanceWeight
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_DrawSignal
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSWaitForReady
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSSendECR_HeartBeat
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM800_PowerOn
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrinter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[57e]"></a>mem_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[58e]"></a>mem_malloc</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[5ce]"></a>mem_realloc</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, mem.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[5bb]"></a>memp_free</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[5aa]"></a>memp_malloc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, memp.o(i.memp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[259]"></a>msDelay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interface.o(i.msDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsXRam
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiptIssue
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PromotionBeep
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IssueKp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDisplay
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCustomer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestBEEP
</UL>

<P><STRONG><a name="[5c5]"></a>netif_is_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_is_up))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>

<P><STRONG><a name="[3cb]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[585]"></a>netif_set_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[56a]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[568]"></a>netif_set_ipaddr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[569]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[56b]"></a>netif_set_up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[567]"></a>ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5bf]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[a2]"></a>partial_cut</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, print_main.o(i.partial_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = partial_cut &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[572]"></a>pbuf_alloc</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5cd]"></a>pbuf_cat</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5c0]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[5ea]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[5a8]"></a>pbuf_copy</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[594]"></a>pbuf_copy_partial</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[574]"></a>pbuf_free</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[5c4]"></a>pbuf_header</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[57a]"></a>pbuf_realloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[5a9]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[561]"></a>put_fat</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[5cf]"></a>pwrADCCtrl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pwr_ctrl.o(i.pwrADCCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwrADCCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[377]"></a>pwrGetStatus</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, pwr_ctrl.o(i.pwrGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwrGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskFromPool
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitApplication
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d2]"></a>pwrIO_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pwr_ctrl.o(i.pwrIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pwrIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_Init
</UL>

<P><STRONG><a name="[49f]"></a>pwr_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwr_ctrl.o(i.pwr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = pwr_Init &rArr; ADC1_DMA_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrIO_Init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrADCCtrl
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[9f]"></a>sel_print_mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, print_main.o(i.sel_print_mode))
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>sel_raster_bit_image</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, print_main.o(i.sel_raster_bit_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sel_raster_bit_image &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[5da]"></a>sf_EraseBlock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_w25qxx.o(i.sf_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_EraseBlock &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashMBlockErase
</UL>

<P><STRONG><a name="[5dd]"></a>sf_EraseChip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_w25qxx.o(i.sf_EraseChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_EraseChip &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashMBlockErase
</UL>

<P><STRONG><a name="[5d6]"></a>sf_EraseSector</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_w25qxx.o(i.sf_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sf_EraseSector &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[4a3]"></a>sf_Init</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, spi_w25qxx.o(i.sf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sf_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteStatus
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Initial
</UL>

<P><STRONG><a name="[5d7]"></a>sf_PageWrite</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, spi_w25qxx.o(i.sf_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[5d4]"></a>sf_ReadBuffer</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi_w25qxx.o(i.sf_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashReadBuffer
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[5e1]"></a>sf_WriteBuffer</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, spi_w25qxx.o(i.sf_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bFlashProgram
</UL>

<P><STRONG><a name="[54f]"></a>spi_bFlashMBlockErase</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, spi_w25qxx.o(i.spi_bFlashMBlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_bFlashMBlockErase &rArr; sf_EraseBlock &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseChip
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashMBlockErase
</UL>

<P><STRONG><a name="[550]"></a>spi_bFlashProgram</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_w25qxx.o(i.spi_bFlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_bFlashProgram &rArr; sf_WriteBuffer &rArr; sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashProgram
</UL>

<P><STRONG><a name="[551]"></a>spi_bFlashReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_w25qxx.o(i.spi_bFlashReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_bFlashReadBuffer &rArr; sf_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFlashReadBuffer
</UL>

<P><STRONG><a name="[5c8]"></a>st7565SetXY</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd_st7567_od.o(i.st7565SetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mClearScreen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawPower
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawGPRS
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawChar
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDrawABox
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDispCursor
</UL>

<P><STRONG><a name="[552]"></a>st7565SetXY_C</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_st7567_cd.o(i.st7565SetXY_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st7565SetXY_C &rArr; ST7565R_WR_CMD_C &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7565R_WR_CMD_C
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cClearScreen
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDrawChar
</UL>

<P><STRONG><a name="[367]"></a>strToBin</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, progopt.o(i.strToBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strToBin
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpt
</UL>

<P><STRONG><a name="[5cc]"></a>tcp_abandon</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[5e6]"></a>tcp_close</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[5e9]"></a>tcp_enqueue</STRONG> (Thumb, 1072 bytes, Stack size 80 bytes, tcp_out.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[5eb]"></a>tcp_fasttmr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[5ed]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5e8]"></a>tcp_output</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[5f2]"></a>tcp_pcb_purge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[5e3]"></a>tcp_pcb_remove</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[5ec]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[5f3]"></a>tcp_recved</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[5f5]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5e5]"></a>tcp_rst</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[5f1]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[5e4]"></a>tcp_segs_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[5e7]"></a>tcp_send_ctrl</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[5ef]"></a>tcp_send_empty_ack</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[5f6]"></a>tcp_slowtmr</STRONG> (Thumb, 752 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[3cc]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[5f4]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[5f7]"></a>tcp_zero_window_probe</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[a1]"></a>total_cut</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, print_main.o(i.total_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = total_cut &rArr; Excute_CR &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSPrint
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Excute_CR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>turn_underline_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print_main.o(i.turn_underline_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = turn_underline_mode &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>tx_printer_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, print_main.o(i.tx_printer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_printer_status &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>tx_status</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, print_main.o(i.tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tx_status &rArr; UARTGet &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Printer_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print_main.o(.constdata)
</UL>
<P><STRONG><a name="[591]"></a>udp_bind</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[592]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[590]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[593]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[58f]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[57b]"></a>udp_sendto_if</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[1df]"></a>usDelay</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, interface.o(i.usDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_TestMAC
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>

<P><STRONG><a name="[127]"></a>usbALLTheFile</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbALLTheFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = usbALLTheFile &rArr; BackupECRFiles &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutRPaper
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPrint
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_ResetFolder
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackupECRFiles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>usbExportALL</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, usbdiskapp.o(i.usbExportALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = usbExportALL &rArr; CreateFlowFile &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_ReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>usbExportDel</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, usbdiskapp.o(i.usbExportDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = usbExportDel &rArr; CreateFlowFile &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Flow
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_ReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>usbExportMenu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, menu.o(i.usbExportMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbExportMenu
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>usbExportNew</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usbdiskapp.o(i.usbExportNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = usbExportNew &rArr; CreateFlowFile &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DiskReady
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState1
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUB_SCANFP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flow
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDecXY
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsState2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFlowFile
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSV_ReceipLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[46a]"></a>usbGetReport</STRONG> (Thumb, 1334 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbGetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = usbGetReport &rArr; U_OpenFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadClerk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTotal
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_OpenFile
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_LocateFile
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_FileSize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_CloseFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportToUSB
</UL>

<P><STRONG><a name="[125]"></a>usbInportMenu</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menu.o(i.usbInportMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbInportMenu
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[5f9]"></a>usbPrintCorrec</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintCorrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbPrintCorrec &rArr; ReadCorrec &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCorrec
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[5fa]"></a>usbPrintCorrecReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintCorrecReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintCorrecReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[5fc]"></a>usbPrintDept</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintDept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbPrintDept &rArr; ReadDept &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDept
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[5fd]"></a>usbPrintDeptReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintDeptReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintDeptReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[5fe]"></a>usbPrintDisc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbPrintDisc &rArr; ReadDisc &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDisc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[5ff]"></a>usbPrintDiscReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintDiscReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintDiscReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[600]"></a>usbPrintGroup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbPrintGroup &rArr; ReadGroup &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGroup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[601]"></a>usbPrintGroupReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintGroupReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintGroupReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[602]"></a>usbPrintPb</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbPrintPb &rArr; PbTotal &rArr; WriteRam &rArr; SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PbTotal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[603]"></a>usbPrintPbtReport</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintPbtReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintPbtReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[604]"></a>usbPrintPlu</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintPlu))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = usbPrintPlu &rArr; ReadPlu &rArr; GetTimeDate &rArr; Bios_1 &rArr; RSPrint &rArr; Check_Paper &rArr; ClsState1 &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPlu
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[605]"></a>usbPrintPluReport</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintPluReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintPluReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[5f8]"></a>usbPrintPointReport</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintPointReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = usbPrintPointReport &rArr; usbPrintTendReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTendReport
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPluReport
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPbtReport
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroupReport
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDiscReport
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDeptReport
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintCorrecReport
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbGetReport
</UL>

<P><STRONG><a name="[5fb]"></a>usbPrintReport</STRONG> (Thumb, 620 bytes, Stack size 40 bytes, usbdiskapp.o(i.usbPrintReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReport
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTotal
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodSkip
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNotZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTotal
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTitlel
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTender
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPlu
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPb
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroup
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDisc
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDept
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintCorrec
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintTendReport
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPluReport
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPbtReport
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintGroupReport
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDiscReport
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintDeptReport
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintCorrecReport
</UL>

<P><STRONG><a name="[606]"></a>usbPrintTendReport</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintTendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = usbPrintTendReport &rArr; usbPrintReport &rArr; usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintPointReport
</UL>

<P><STRONG><a name="[608]"></a>usbPrintTender</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbdiskapp.o(i.usbPrintTender))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbPrintTender &rArr; ReadTender &rArr; ReadRam &rArr; SRAM_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTender
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[607]"></a>usbPrintTitlel</STRONG> (Thumb, 486 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintTitlel))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = usbPrintTitlel &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[609]"></a>usbPrintTotal</STRONG> (Thumb, 840 bytes, Stack size 8 bytes, usbdiskapp.o(i.usbPrintTotal))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = usbPrintTotal &rArr; U_WriteFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subtract
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U_WriteFile
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatBCD_DEC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbPrintReport
</UL>

<P><STRONG><a name="[309]"></a>xprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, monitor.o(i.xprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = xprintf &rArr; xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Initial
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_DHCP_Process_Handle
</UL>

<P><STRONG><a name="[60b]"></a>xputc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, monitor.o(i.xputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xputc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>

<P><STRONG><a name="[30a]"></a>xputs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, monitor.o(i.xputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStrXY
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Start
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_ITHandler
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxputc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_ResetDevice
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_OverCurrentDetected
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAddressAssigned
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceSuspended
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceResumed
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceReset
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceDisconnected
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConnected
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConfigured
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60a]"></a>xvprintf</STRONG> (Thumb, 562 bytes, Stack size 120 bytes, monitor.o(i.xvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = xvprintf &rArr; xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxputc
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>

<P><STRONG><a name="[60c]"></a>xxputc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, monitor.o(i.xxputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xxputc &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xvprintf
</UL>

<P><STRONG><a name="[25a]"></a>CmdError</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[25e]"></a>CmdResp1Error</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[261]"></a>CmdResp2Error</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[262]"></a>CmdResp3Error</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdio_sd.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[263]"></a>CmdResp6Error</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sdio_sd.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[264]"></a>CmdResp7Error</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdio_sd.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[31a]"></a>FindSCR</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, sdio_sd.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[46d]"></a>SDEnWideBus</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, sdio_sd.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[5d3]"></a>sf_AutoWritePage</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, spi_w25qxx.o(i.sf_AutoWritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sf_AutoWritePage &rArr; sf_PageWrite &rArr; sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_NeedErase
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteBuffer
</UL>

<P><STRONG><a name="[5d8]"></a>sf_CmpData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, spi_w25qxx.o(i.sf_CmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sf_CmpData
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[5d5]"></a>sf_NeedErase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_w25qxx.o(i.sf_NeedErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_NeedErase
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_AutoWritePage
</UL>

<P><STRONG><a name="[5d9]"></a>sf_SendByte</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, spi_w25qxx.o(i.sf_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_ReadBuffer
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseChip
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseBlock
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteStatus
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WriteEnable
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_WaitForWriteEnd
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_CmpData
</UL>

<P><STRONG><a name="[5dc]"></a>sf_WaitForWriteEnd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi_w25qxx.o(i.sf_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sf_WaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseChip
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseBlock
</UL>

<P><STRONG><a name="[5db]"></a>sf_WriteEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_w25qxx.o(i.sf_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sf_WriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_PageWrite
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseSector
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseChip
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_EraseBlock
</UL>

<P><STRONG><a name="[5e0]"></a>sf_WriteStatus</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, spi_w25qxx.o(i.sf_WriteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sf_WriteStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf_Init
</UL>

<P><STRONG><a name="[4ac]"></a>SetSysClock</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, system_stm32f2xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[457]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[45f]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[52d]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[533]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
</UL>

<P><STRONG><a name="[28d]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[290]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[295]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d1]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[298]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d3]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d2]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[29a]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; usDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d4]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[4d5]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[292]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[294]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[51f]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[520]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[51d]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[536]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[537]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[51b]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[51e]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; msDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[51c]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[51a]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[519]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4cb]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[3]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4c4]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4cc]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4cd]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4ce]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4d6]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4d8]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4db]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[4ff]"></a>USBH_HandleEnum</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[4e1]"></a>USBH_GetFreeChannel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_GetFreeChannel))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>

<P><STRONG><a name="[4e7]"></a>USBH_SubmitSetupRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_SubmitSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SubmitSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[4ee]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[4f0]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[523]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[522]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[4f4]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_stdreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[4f1]"></a>USBH_Get_HID_Descriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_Get_HID_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_Descriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[4f2]"></a>USBH_Get_HID_ReportDescriptor</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_Get_HID_ReportDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_Get_HID_ReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[94]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_HID_ClassRequest &rArr; USBH_Get_HID_ReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Protocol
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Set_Idle
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseHIDDesc
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_ReportDescriptor
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_HID_Descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
</UL>
<P><STRONG><a name="[95]"></a>USBH_HID_Handle</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_HID_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_HID_Handle &rArr; USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
</UL>
<P><STRONG><a name="[93]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
</UL>
<P><STRONG><a name="[92]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(i.Set_USBH_HID_CallBacks)
</UL>
<P><STRONG><a name="[4f5]"></a>USBH_ParseHIDDesc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_hid_core.o(i.USBH_ParseHIDDesc))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[4f6]"></a>USBH_Set_Idle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usbh_hid_core.o(i.USBH_Set_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_Set_Idle &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[4f7]"></a>USBH_Set_Protocol</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_Set_Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_Set_Protocol &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[d]"></a>KEYBRD_Decode</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usbh_hid_keybd.o(i.KEYBRD_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEYBRD_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>KEYBRD_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_keybd.o(i.KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KEYBRD_Init &rArr; USR_KEYBRD_Init &rArr; xputs &rArr; DispStrXY &rArr; DispCharXY &rArr; ScrollScreen &rArr; mRefreshLine &rArr; mDispStringXY &rArr; mDispCharXY &rArr; mDrawChar &rArr; st7565SetXY &rArr; ST7565R_WR_CMD &rArr; ST7565R_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>MOUSE_Decode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_hid_mouse.o(i.MOUSE_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOUSE_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>MOUSE_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_hid_mouse.o(i.MOUSE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOUSE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[508]"></a>USBH_MSC_BOTReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_BOTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_BOTReset &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[12]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_msc_core.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_ClassRequest
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbh_msc_core.o(.data)
<LI> usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
</UL>
<P><STRONG><a name="[50d]"></a>USBH_MSC_GETMaxLUN</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_GETMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_GETMaxLUN &rArr; USBH_CtlReq &rArr; USBH_SubmitSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Handle
</UL>

<P><STRONG><a name="[13]"></a>USBH_MSC_Handle</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, usbh_msc_core.o(i.USBH_MSC_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_MSC_Handle &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_TestUnitReady
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RequestSense
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity10
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ModeSense6
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ErrorHandle
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GETMaxLUN
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOTReset
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_HandleBOTXfer
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbh_msc_core.o(.data)
<LI> usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
</UL>
<P><STRONG><a name="[11]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbh_msc_core.o(.data)
<LI> usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
</UL>
<P><STRONG><a name="[10]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, usbh_msc_core.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbh_msc_core.o(.data)
<LI> usbh_msc_core.o(i.Set_USBH_MSC_CallBacks)
</UL>
<P><STRONG><a name="[557]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[564]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5b8]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[559]"></a>chk_mounted</STRONG> (Thumb, 920 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[55c]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[55d]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[55f]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[562]"></a>create_name</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[5b2]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[595]"></a>dir_alloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[599]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[598]"></a>dir_next</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[59e]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5a2]"></a>dir_register_formkdir</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, ff.o(i.dir_register_formkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dir_register_formkdir &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[596]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[5b9]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5a1]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[5af]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[5ba]"></a>inc_lock</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5b0]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[59b]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[59f]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[565]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[597]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[5b6]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5b5]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[59a]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register_formkdir
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5b7]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[59c]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sync_window &rArr; disk_write &rArr; USBH_MSC_HandleBOTXfer &rArr; USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[5b3]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[566]"></a>dhcp_bind</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[56d]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[571]"></a>dhcp_create_request</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[573]"></a>dhcp_delete_request</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[575]"></a>dhcp_discover</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[57d]"></a>dhcp_free_reply</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[582]"></a>dhcp_get_option_byte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[581]"></a>dhcp_get_option_long</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[580]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[57f]"></a>dhcp_handle_ack</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_handle_ack &rArr; dhcp_get_option_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[584]"></a>dhcp_handle_nak</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[586]"></a>dhcp_handle_offer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[576]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[577]"></a>dhcp_option_byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[58a]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
</UL>

<P><STRONG><a name="[578]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[579]"></a>dhcp_option_trailer</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[588]"></a>dhcp_rebind</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[589]"></a>dhcp_reboot</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[98]"></a>dhcp_recv</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[587]"></a>dhcp_select</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[56c]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[570]"></a>dhcp_t1_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[56f]"></a>dhcp_t2_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[57c]"></a>dhcp_timeout</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[58b]"></a>dhcp_unfold_reply</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcp_unfold_reply &rArr; pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[5cb]"></a>plug_holes</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[5f0]"></a>tcp_output_segment</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[5ee]"></a>tcp_output_set_header</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_output_set_header &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[5bd]"></a>lwip_standard_chksum</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[5a7]"></a>etharp_send_ip</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[5a5]"></a>find_entry</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[5ad]"></a>free_etharp_q</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[5ae]"></a>low_level_input</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[545]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[54b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[548]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[547]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[54d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
